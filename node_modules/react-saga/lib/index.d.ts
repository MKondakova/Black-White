/// <reference types="redux-saga" />
import * as Immutable from 'immutable';
import { Effect } from 'redux-saga/effects';
import { ReactElement, StatelessComponent, Props } from 'react';
export interface PropsElement<P> extends ReactElement<P & Props<any>> {
}
export interface SagaProps<S> {
    state: S;
}
export interface SagaComponent<P, S> extends StatelessComponent<P & SagaProps<S>> {
}
export interface SagaDescriptor<P, S> {
    saga: SagaComponent<P, S>;
    props: Immutable.Map<string, any>;
}
export declare type SagaResult = IterableIterator<Effect>;
export declare type SagaGenerator = (payload?: any) => SagaResult;
export interface IGroup {
    (props?: void, ...children: Array<PropsElement<any>>): any;
}
export declare type CustomGroup = (payload?: any) => PropsElement<any> | void;
export declare const Group: IGroup;
export declare function createElement<P>(cls: IGroup | SagaGenerator | CustomGroup, props?: P, ...children: Array<PropsElement<any>>): PropsElement<P>;
export declare function render<P, S>(node: PropsElement<P> | null, state: S): SagaDescriptor<{}, S>[];
export declare function reactSaga<S>(node: PropsElement<{}>, debugFn?: (...args: any[]) => void): SagaGenerator;
