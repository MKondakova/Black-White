
server api tests:
  - check submitting moves outside of the current board, to ensure it errors




use babel-env-presets to get more fine-grained browser support? or something?


somehow have the JS generate the CSS automatically

add strictSetup/strictWithoutDefaults which does not use defaults
enforce given renderer hooks values so no extra values are given, and take a pass on options hashes to also enforce them

intersectionAt and related methods could raise on invalid coordinates?


UI tests:

- state is properly reset, e.g., an undo will wind back the game state and re-rendering will remove a stone from the UI (both SVG and DOM)
- played point marker indicator is added
- ko indicator is added
- hoshi points are shown properly
- multiple board sizes render properly
- clicking illegal moves: does it error?
- territory is marked correctly, including for seki
- dead point marking rendering works as you'd expect
- renderer tests should test against board state objects, and then separately test that games affect board state correctly

Other tests:

- what does undo() return?
- how does undo() work after 2 consecutive passes?
- other ko rule restrictions
- test the types of illegal moves (separate from testing playAt directly?):
	- suicide (both plain empty and self-capturing existing group), ko, superko
	- playAt is false, isIllegalAt is true, playAt doesn't change the current player, the board doesn't change state and the stone doesn't change color (or from empty if it was illegal for a non-occupied reason), playedPoint is the move before playAt
- assigning a non-number to handicap stones

testing framework:
- parallel?
- randomness?
- extract out a testing "language" to write test cases which can then be run through a symmetry to test to confirm that tests are invariant under player color swapping?

in a server environment:

- do illegal move detection client-side for performance
- switch off seki detection and let the server dictate which points are territory or not
- switch off local dead stone marking, and have the server do all of that

to check:
- does equivalence scoring add pass stones for scoring/counting purposes? thrown away for area _counting_?
- equivalence scoring should end the game after 2 successive passes, but provide an extra "virtual pass" for white if necessary, representing the post-agreement pass by white. it should _not_ require a white-last pass to end the game!
- should playAt throw a (custom) error to prevent subtle errors? that would require checking validity and handling errors, instead of allowing an attempt to be made and returning false
- better implementation of gradient styling with lighting effects?

○
●

// ┌─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┬─┐
// ├─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┤
// ├─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┤
// ├─┼─┼─•─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─•─┼─┼─┤
// ├─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┤
// ├─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┤
// ├─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┤
// ├─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┤
// ├─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┤
// ├─┼─┼─┼─┼─┼─┼─┼─┼─•─┼─┼─┼─┼─┼─┼─┼─┼─┤
// ├─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┤
// ├─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┤
// ├─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┤
// ├─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┤
// ├─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┤
// ├─┼─┼─•─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─•─┼─┼─┤
// ├─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┤
// ├─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┼─┤
// └─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┘


// ┌─┬─┬─┬─┬─┬─┬─┬─┐
// ├─┼─┼─┼─┼─┼─┼─┼─┤
// ├─┼─┼─┼─┼─┼─┼─┼─┤
// ├─┼─┼─┼─┼─┼─┼─┼─┤
// ├─┼─┼─┼─┼─┼─┼─┼─┤
// ├─┼─┼─┼─┼─┼─┼─┼─┤
// ├─┼─┼─┼─┼─┼─┼─┼─┤
// ├─┼─┼─┼─┼─┼─┼─┼─┤
// └─┴─┴─┴─┴─┴─┴─┴─┘
