import { SVGBoard } from '../../SVGBoard';
import { FieldObject, BoardObject, BoardViewport } from '../../BoardBase';
import { Point } from '../../types';
import { SVGBoardObject, SVGDrawHandler, SVGBoardTheme } from '../../SVGBoard/types';
import { PartialRecursive } from '../../utils/makeConfig';
import PlayerDOMComponent from './PlayerDOMComponent';
import PlayerDOM from '../PlayerDOM';
export interface SVGBoardComponentConfig {
    coordinates: boolean;
    currentMoveBlackMark: SVGDrawHandler;
    currentMoveWhiteMark: SVGDrawHandler;
    variationDrawHandler: SVGDrawHandler;
    starPoints?: {
        [size: number]: Point[];
    };
    coordinateLabelsX?: string | (string | number)[];
    coordinateLabelsY?: string | (string | number)[];
    highlightCurrentMove: boolean;
    showVariations: boolean;
    showCurrentVariations: boolean;
    theme?: PartialRecursive<SVGBoardTheme>;
}
export declare const defaultSVGBoardComponentConfig: SVGBoardComponentConfig;
export default class SVGBoardComponent implements PlayerDOMComponent {
    board: SVGBoard;
    config: SVGBoardComponentConfig;
    element: HTMLElement;
    player: PlayerDOM;
    stoneBoardsObjects: FieldObject[];
    temporaryBoardObjects: SVGBoardObject[];
    viewportStack: BoardViewport[];
    boardMouseX: number;
    boardMouseY: number;
    constructor(config?: PartialRecursive<SVGBoardComponentConfig>);
    createDOM(): void;
    create(player: PlayerDOM): void;
    destroy(): void;
    protected updateStones(): void;
    protected addVariationMarkup(): void;
    protected clearTemporaryBoardObjects(): void;
    protected handleBoardClick(point: Point): void;
    protected handleBoardMouseMove(point: Point): void;
    protected handleBoardMouseOut(): void;
    private handleVariationCursor;
    private removeVariationCursor;
    private applyNodeChanges;
    private clearNodeChanges;
    private applyMarkupProperty;
    private applyLabelMarkupProperty;
    private applyLineMarkupProperty;
    private applyViewportProperty;
    private clearViewportProperty;
    private applyMoveProperty;
    addTemporaryBoardObject(obj: BoardObject): void;
    removeTemporaryBoardObject(obj: FieldObject): void;
    updateTemporaryBoardObject(obj: FieldObject): void;
    setCoordinates(b: boolean): void;
    getVariations(): Point[];
    shouldShowVariations(): boolean;
    shouldShowCurrentVariations(): boolean;
}
