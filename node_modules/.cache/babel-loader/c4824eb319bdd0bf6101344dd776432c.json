{"ast":null,"code":"import { all, takeLatest, call, put } from \"redux-saga/effects\";\nimport { getToken } from \"../../helpers/session\";\nimport { SINGLE_HELP, GET_HINT_BEST_MOVES, GET_HINT_SHOW_BEST, GET_HINT_HEATMAP_FULL, MAP_HELP, GET_HINT_HEATMAP_ZONE, SCORES_WINNER, GET_SCORES_WINNER } from \"./types\";\nimport { helpBestMoves, helpShowBest, helpHeatmapFull, helpHeatmapZone, scoresWinner } from \"../../api/board\";\n\nfunction* fetchGetHintBestMoves_saga(action) {\n  const {\n    payload\n  } = action;\n\n  try {\n    const res = yield call(helpBestMoves, getToken(), payload.game_id, payload.count);\n\n    if (res.hint) {\n      let newObj = {};\n      res.hint.forEach((key, i) => {\n        newObj[key.move] = i + 1;\n      });\n      yield put({\n        type: SINGLE_HELP,\n        payload: newObj\n      });\n    }\n  } catch (e) {//throw e;\n  }\n}\n\nfunction* fetchGetHintShowBest_saga(action) {\n  const {\n    payload\n  } = action;\n\n  try {\n    const res = yield call(helpShowBest, getToken(), payload.game_id, payload.moves);\n\n    if (res.hint) {\n      const newObj = {};\n      newObj[res.hint] = 'circle';\n      yield put({\n        type: SINGLE_HELP,\n        payload: newObj\n      });\n    }\n  } catch (e) {//throw e;\n  }\n}\n\nfunction* fetchGetHintHeatmapFull_saga(action) {\n  const {\n    payload\n  } = action;\n\n  try {\n    const res = yield call(helpHeatmapFull, getToken(), payload.game_id);\n\n    if (res.hint) {\n      yield put({\n        type: MAP_HELP,\n        payload: res.hint\n      });\n    }\n  } catch (e) {//throw e;\n  }\n}\n\nfunction* fetchGetHintHeatmapZone_saga(action) {\n  const {\n    payload\n  } = action;\n\n  try {\n    const res = yield call(helpHeatmapZone, getToken(), payload.game_id, payload.isQuarter);\n\n    if (res.hint) {\n      yield put({\n        type: MAP_HELP,\n        payload: {\n          zone: res.hint,\n          isQuarter: payload.isQuarter\n        }\n      });\n    }\n  } catch (e) {//throw e;\n  }\n}\n\nfunction* fetchGetHintScoresWinner_saga(action) {\n  const {\n    payload\n  } = action;\n\n  try {\n    const res = yield call(scoresWinner, getToken(), payload.game_id);\n\n    if (res.hint) {\n      yield put({\n        type: SCORES_WINNER,\n        payload: res.hint\n      });\n    }\n  } catch (e) {//throw e;\n  }\n}\n\nexport function* boardSaga() {\n  yield all([takeLatest(GET_HINT_BEST_MOVES, fetchGetHintBestMoves_saga), takeLatest(GET_HINT_SHOW_BEST, fetchGetHintShowBest_saga), takeLatest(GET_HINT_HEATMAP_FULL, fetchGetHintHeatmapFull_saga), takeLatest(GET_HINT_HEATMAP_ZONE, fetchGetHintHeatmapZone_saga), takeLatest(GET_SCORES_WINNER, fetchGetHintScoresWinner_saga)]);\n}","map":{"version":3,"sources":["/Users/garinegorgmail.com/Downloads/gohackathon-base-client-instance-master/src/store/Board/saga.js"],"names":["all","takeLatest","call","put","getToken","SINGLE_HELP","GET_HINT_BEST_MOVES","GET_HINT_SHOW_BEST","GET_HINT_HEATMAP_FULL","MAP_HELP","GET_HINT_HEATMAP_ZONE","SCORES_WINNER","GET_SCORES_WINNER","helpBestMoves","helpShowBest","helpHeatmapFull","helpHeatmapZone","scoresWinner","fetchGetHintBestMoves_saga","action","payload","res","game_id","count","hint","newObj","forEach","key","i","move","type","e","fetchGetHintShowBest_saga","moves","fetchGetHintHeatmapFull_saga","fetchGetHintHeatmapZone_saga","isQuarter","zone","fetchGetHintScoresWinner_saga","boardSaga"],"mappings":"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","sourcesContent":["import { all, takeLatest, call, put } from \"redux-saga/effects\";\nimport { getToken } from \"../../helpers/session\";\nimport {\n  SINGLE_HELP,\n  GET_HINT_BEST_MOVES,\n  GET_HINT_SHOW_BEST,\n  GET_HINT_HEATMAP_FULL,\n  MAP_HELP,\n  GET_HINT_HEATMAP_ZONE,\n  SCORES_WINNER,\n  GET_SCORES_WINNER\n} from \"./types\";\nimport {\n  helpBestMoves,\n  helpShowBest,\n  helpHeatmapFull,\n  helpHeatmapZone,\n  scoresWinner\n} from \"../../api/board\";\n\nfunction* fetchGetHintBestMoves_saga(action) {\n  const { payload } = action;\n  try {\n    const res = yield call(helpBestMoves, getToken(), payload.game_id, payload.count);\n    if (res.hint) {\n      let newObj = {};\n      res.hint.forEach((key, i) => {\n        newObj[key.move] = i+1\n      })\n      yield put({ type: SINGLE_HELP, payload: newObj})\n    }\n  } catch (e) {\n    //throw e;\n  }\n}\n\nfunction* fetchGetHintShowBest_saga(action) {\n  const { payload } = action;\n  try {\n    const res = yield call(helpShowBest, getToken(), payload.game_id, payload.moves);\n    if (res.hint) {\n      const newObj = {}\n      newObj[res.hint] = 'circle'\n      yield put({ type: SINGLE_HELP, payload: newObj})\n    }\n  } catch (e) {\n    //throw e;\n  }\n}\n\nfunction* fetchGetHintHeatmapFull_saga(action) {\n  const { payload } = action;\n  try {\n    const res = yield call(helpHeatmapFull, getToken(), payload.game_id);\n    if (res.hint) {\n      yield put({ type: MAP_HELP, payload: res.hint})\n    }\n  } catch (e) {\n    //throw e;\n  }\n}\n\nfunction* fetchGetHintHeatmapZone_saga(action) {\n  const { payload } = action;\n  try {\n    const res = yield call(helpHeatmapZone, getToken(), payload.game_id, payload.isQuarter);\n    if (res.hint) {\n      yield put({ type: MAP_HELP, payload: { zone: res.hint, isQuarter: payload.isQuarter}})\n    }\n  } catch (e) {\n    //throw e;\n  }\n}\n\nfunction* fetchGetHintScoresWinner_saga(action) {\n  const { payload } = action;\n  try {\n    const res = yield call(scoresWinner, getToken(), payload.game_id);\n    if (res.hint) {\n      yield put({ type: SCORES_WINNER, payload: res.hint})\n    }\n  } catch (e) {\n    //throw e;\n  }\n}\n\nexport function* boardSaga() {\n  yield all([\n    takeLatest(GET_HINT_BEST_MOVES, fetchGetHintBestMoves_saga),\n    takeLatest(GET_HINT_SHOW_BEST, fetchGetHintShowBest_saga),\n    takeLatest(GET_HINT_HEATMAP_FULL, fetchGetHintHeatmapFull_saga),\n    takeLatest(GET_HINT_HEATMAP_ZONE, fetchGetHintHeatmapZone_saga),\n    takeLatest(GET_SCORES_WINNER, fetchGetHintScoresWinner_saga),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}