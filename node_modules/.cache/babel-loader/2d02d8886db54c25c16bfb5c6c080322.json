{"ast":null,"code":"import logger from '../helpers/logger';\nimport { __DEV__ } from '../constants/env';\nconst TIMEOUT = 20000; // 20 sec timeout\n\nconst baseUrl = process.env.REACT_APP_PUBLIC_URL || 'https://go-backend-denis.ambersoft.llc';\n\nconst fetchWithTimeout = (...args) => {\n  // eslint-disable-next-line no-async-promise-executor\n  return new Promise(async resolve => {\n    const t = setTimeout(() => {\n      resolve({\n        status: 0,\n        error: 'Request timed out'\n      });\n    }, TIMEOUT);\n\n    try {\n      const res = await fetch(...args);\n      resolve(res);\n    } finally {\n      clearTimeout(t);\n    }\n  });\n};\n\nconst authHeaders = token => {\n  const headers = new Headers();\n  headers.append('Content-Type', 'application/json');\n  headers.append('Authorization', `Bearer ${token}`);\n  headers.append('Accept', 'application/json');\n  return headers;\n};\n/**\n * Throws connection error.\n */\n\n\nconst throwConnectionError = error => {\n  throw new Error(error);\n};\n\nconst BaseAPI = (method, {\n  url,\n  body,\n  token\n}, mockResponse) => {\n  const baseHeaders = new Headers(); // baseHeaders.append('Content-Type', 'application/json');\n  // baseHeaders.append('Accept', 'application/json');\n\n  const uri = `${baseUrl}/${url}`;\n  const params = {\n    method,\n    mode: 'cors',\n    headers: baseHeaders // dataType: 'json'\n\n  };\n\n  if (method !== 'GET') {\n    params.body = JSON.stringify(body);\n  }\n\n  logger.info(`${method}: `, uri, params);\n\n  if (mockResponse) {\n    return new Promise(resolve => resolve(mockResponse));\n  }\n\n  return fetchWithTimeout(uri, params).catch(throwConnectionError).then(async response => {\n    await validateResponse(response);\n    return response;\n  }).then(response => {\n    if (response.status === 401) {\n      return {\n        code: response.status,\n        message: response.statusText\n      };\n    }\n\n    return response.json();\n  });\n};\n\n_c = BaseAPI;\nexport const POST = (url, body, token = null, mockResponse = undefined) => {\n  return BaseAPI('POST', {\n    url,\n    body,\n    token\n  }, mockResponse);\n};\n_c2 = POST;\nexport const PUT = (url, body, token = null, mockResponse = undefined) => {\n  return BaseAPI('PUT', {\n    url,\n    body,\n    token\n  }, mockResponse);\n};\n_c3 = PUT;\nexport const PATCH = (url, body, token = null, mockResponse = undefined) => {\n  return BaseAPI('PATCH', {\n    url,\n    body,\n    token\n  }, mockResponse);\n};\n_c4 = PATCH;\nexport const GET = (url, body, token = null, mockResponse = undefined) => {\n  return BaseAPI('GET', {\n    url,\n    body,\n    token\n  }, mockResponse);\n};\n_c5 = GET;\nexport const DELETE = (url, body, token = null, mockResponse = undefined) => {\n  return BaseAPI('DELETE', {\n    url,\n    body,\n    token\n  }, mockResponse);\n};\n/**\n* Validates HTTP response and throws error if something goes wrong.\n* @param {Response} response\n*/\n\n_c6 = DELETE;\n\nconst validateResponse = async response => {\n  // Redirect user to login screen if he is not authorized\n  if (response.status === 401) {\n    return Promise.resolve(true);\n  }\n\n  if (response.status !== 200 || response.error) {\n    // if (!Config.__TEST__) {\n    logger.error(response); // }\n  } // if (Config.__TEST__) return Promise.resolve(true);\n\n\n  if (__DEV__ && typeof response.clone === 'function') {\n    const clonedResponse = response.clone();\n    const body = await clonedResponse.json();\n    logger.info({\n      response,\n      body\n    });\n  } else {\n    logger.info(response);\n  }\n\n  return Promise.resolve(true);\n};\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"BaseAPI\");\n$RefreshReg$(_c2, \"POST\");\n$RefreshReg$(_c3, \"PUT\");\n$RefreshReg$(_c4, \"PATCH\");\n$RefreshReg$(_c5, \"GET\");\n$RefreshReg$(_c6, \"DELETE\");","map":{"version":3,"sources":["/Users/garinegorgmail.com/Downloads/gohackathon-base-client-instance-master/src/api/base.js"],"names":["logger","__DEV__","TIMEOUT","baseUrl","process","env","REACT_APP_PUBLIC_URL","fetchWithTimeout","args","Promise","resolve","t","setTimeout","status","error","res","fetch","clearTimeout","authHeaders","token","headers","Headers","append","throwConnectionError","Error","BaseAPI","method","url","body","mockResponse","baseHeaders","uri","params","mode","JSON","stringify","info","catch","then","response","validateResponse","code","message","statusText","json","POST","undefined","PUT","PATCH","GET","DELETE","clone","clonedResponse"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,mBAAnB;AACA,SAAQC,OAAR,QAAuB,kBAAvB;AAEA,MAAMC,OAAO,GAAG,KAAhB,C,CAAuB;;AACvB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,oBAAZ,IAAoC,wCAApD;;AAEA,MAAMC,gBAAgB,GAAG,CAAC,GAAGC,IAAJ,KAAa;AACpC;AACA,SAAO,IAAIC,OAAJ,CAAY,MAAMC,OAAN,IAAiB;AAClC,UAAMC,CAAC,GAAGC,UAAU,CAAC,MAAM;AACzBF,MAAAA,OAAO,CAAC;AAAEG,QAAAA,MAAM,EAAE,CAAV;AAAaC,QAAAA,KAAK,EAAE;AAApB,OAAD,CAAP;AACD,KAFmB,EAEjBZ,OAFiB,CAApB;;AAGA,QAAI;AACF,YAAMa,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGR,IAAJ,CAAvB;AACAE,MAAAA,OAAO,CAACK,GAAD,CAAP;AACD,KAHD,SAGU;AACRE,MAAAA,YAAY,CAACN,CAAD,CAAZ;AACD;AACF,GAVM,CAAP;AAWD,CAbD;;AAeA,MAAMO,WAAW,GAAGC,KAAK,IAAI;AAC3B,QAAMC,OAAO,GAAG,IAAIC,OAAJ,EAAhB;AACAD,EAAAA,OAAO,CAACE,MAAR,CAAe,cAAf,EAA+B,kBAA/B;AACAF,EAAAA,OAAO,CAACE,MAAR,CAAe,eAAf,EAAiC,UAASH,KAAM,EAAhD;AACAC,EAAAA,OAAO,CAACE,MAAR,CAAe,QAAf,EAAyB,kBAAzB;AACA,SAAOF,OAAP;AACD,CAND;AAQA;AACA;AACA;;;AACA,MAAMG,oBAAoB,GAAIT,KAAD,IAAW;AACtC,QAAM,IAAIU,KAAJ,CAAUV,KAAV,CAAN;AACD,CAFD;;AAIA,MAAMW,OAAO,GAAG,CAACC,MAAD,EAAS;AAAEC,EAAAA,GAAF;AAAOC,EAAAA,IAAP;AAAaT,EAAAA;AAAb,CAAT,EAA+BU,YAA/B,KAAgD;AAE9D,QAAMC,WAAW,GAAG,IAAIT,OAAJ,EAApB,CAF8D,CAG9D;AACA;;AACA,QAAMU,GAAG,GAAI,GAAE5B,OAAQ,IAAGwB,GAAI,EAA9B;AAEA,QAAMK,MAAM,GAAG;AACbN,IAAAA,MADa;AAEbO,IAAAA,IAAI,EAAE,MAFO;AAGbb,IAAAA,OAAO,EAAEU,WAHI,CAIb;;AAJa,GAAf;;AAOA,MAAIJ,MAAM,KAAK,KAAf,EAAsB;AACpBM,IAAAA,MAAM,CAACJ,IAAP,GAAcM,IAAI,CAACC,SAAL,CAAeP,IAAf,CAAd;AACD;;AAED5B,EAAAA,MAAM,CAACoC,IAAP,CAAa,GAAEV,MAAO,IAAtB,EAA2BK,GAA3B,EAAgCC,MAAhC;;AAEA,MAAIH,YAAJ,EAAkB;AAChB,WAAO,IAAIpB,OAAJ,CAAaC,OAAD,IAAaA,OAAO,CAACmB,YAAD,CAAhC,CAAP;AACD;;AAED,SAAOtB,gBAAgB,CAACwB,GAAD,EAAMC,MAAN,CAAhB,CACFK,KADE,CACId,oBADJ,EAEFe,IAFE,CAEG,MAAMC,QAAN,IAAkB;AACtB,UAAMC,gBAAgB,CAACD,QAAD,CAAtB;AACA,WAAOA,QAAP;AACD,GALE,EAMFD,IANE,CAMGC,QAAQ,IAAI;AAChB,QAAIA,QAAQ,CAAC1B,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,aAAO;AAAE4B,QAAAA,IAAI,EAAEF,QAAQ,CAAC1B,MAAjB;AAAyB6B,QAAAA,OAAO,EAAEH,QAAQ,CAACI;AAA3C,OAAP;AACD;;AAED,WAAOJ,QAAQ,CAACK,IAAT,EAAP;AACD,GAZE,CAAP;AAaD,CArCD;;KAAMnB,O;AAuCN,OAAO,MAAMoB,IAAI,GAAG,CAAClB,GAAD,EAAMC,IAAN,EAAYT,KAAK,GAAG,IAApB,EAA0BU,YAAY,GAAGiB,SAAzC,KAAuD;AACzE,SAAOrB,OAAO,CAAC,MAAD,EAAS;AAACE,IAAAA,GAAD;AAAMC,IAAAA,IAAN;AAAYT,IAAAA;AAAZ,GAAT,EAA6BU,YAA7B,CAAd;AACD,CAFM;MAAMgB,I;AAIb,OAAO,MAAME,GAAG,GAAG,CAACpB,GAAD,EAAMC,IAAN,EAAYT,KAAK,GAAG,IAApB,EAA0BU,YAAY,GAAGiB,SAAzC,KAAuD;AACxE,SAAOrB,OAAO,CAAC,KAAD,EAAQ;AAACE,IAAAA,GAAD;AAAMC,IAAAA,IAAN;AAAYT,IAAAA;AAAZ,GAAR,EAA4BU,YAA5B,CAAd;AACD,CAFM;MAAMkB,G;AAIb,OAAO,MAAMC,KAAK,GAAG,CAACrB,GAAD,EAAMC,IAAN,EAAYT,KAAK,GAAG,IAApB,EAA0BU,YAAY,GAAGiB,SAAzC,KAAuD;AAC1E,SAAOrB,OAAO,CAAC,OAAD,EAAU;AAACE,IAAAA,GAAD;AAAMC,IAAAA,IAAN;AAAYT,IAAAA;AAAZ,GAAV,EAA8BU,YAA9B,CAAd;AACD,CAFM;MAAMmB,K;AAIb,OAAO,MAAMC,GAAG,GAAG,CAACtB,GAAD,EAAMC,IAAN,EAAYT,KAAK,GAAG,IAApB,EAA0BU,YAAY,GAAGiB,SAAzC,KAAuD;AACxE,SAAOrB,OAAO,CAAC,KAAD,EAAQ;AAACE,IAAAA,GAAD;AAAMC,IAAAA,IAAN;AAAYT,IAAAA;AAAZ,GAAR,EAA4BU,YAA5B,CAAd;AACD,CAFM;MAAMoB,G;AAIb,OAAO,MAAMC,MAAM,GAAG,CAACvB,GAAD,EAAMC,IAAN,EAAYT,KAAK,GAAG,IAApB,EAA0BU,YAAY,GAAGiB,SAAzC,KAAuD;AAC3E,SAAOrB,OAAO,CAAC,QAAD,EAAW;AAACE,IAAAA,GAAD;AAAMC,IAAAA,IAAN;AAAYT,IAAAA;AAAZ,GAAX,EAA+BU,YAA/B,CAAd;AACD,CAFM;AAIP;AACA;AACA;AACA;;MAPaqB,M;;AAQb,MAAMV,gBAAgB,GAAG,MAAOD,QAAP,IAAoB;AAC5C;AACA,MAAIA,QAAQ,CAAC1B,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,WAAOJ,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAED,MAAI6B,QAAQ,CAAC1B,MAAT,KAAoB,GAApB,IAA2B0B,QAAQ,CAACzB,KAAxC,EAA+C;AAC7C;AACAd,IAAAA,MAAM,CAACc,KAAP,CAAayB,QAAb,EAF6C,CAG7C;AACD,GAV2C,CAY5C;;;AACA,MAAItC,OAAO,IAAI,OAAOsC,QAAQ,CAACY,KAAhB,KAA0B,UAAzC,EAAqD;AACnD,UAAMC,cAAc,GAAGb,QAAQ,CAACY,KAAT,EAAvB;AACA,UAAMvB,IAAI,GAAG,MAAMwB,cAAc,CAACR,IAAf,EAAnB;AAEA5C,IAAAA,MAAM,CAACoC,IAAP,CAAY;AACVG,MAAAA,QADU;AAEVX,MAAAA;AAFU,KAAZ;AAID,GARD,MAQO;AACL5B,IAAAA,MAAM,CAACoC,IAAP,CAAYG,QAAZ;AACD;;AAED,SAAO9B,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AACA,CA1BD","sourcesContent":["import logger from '../helpers/logger';\nimport {__DEV__ } from '../constants/env';\n\nconst TIMEOUT = 20000; // 20 sec timeout\nconst baseUrl = process.env.REACT_APP_PUBLIC_URL || 'https://go-backend-denis.ambersoft.llc';\n\nconst fetchWithTimeout = (...args) => {\n  // eslint-disable-next-line no-async-promise-executor\n  return new Promise(async resolve => {\n    const t = setTimeout(() => {\n      resolve({ status: 0, error: 'Request timed out' });\n    }, TIMEOUT);\n    try {\n      const res = await fetch(...args);\n      resolve(res);\n    } finally {\n      clearTimeout(t);\n    }\n  });\n}\n\nconst authHeaders = token => {\n  const headers = new Headers();\n  headers.append('Content-Type', 'application/json');\n  headers.append('Authorization', `Bearer ${token}`);\n  headers.append('Accept', 'application/json');\n  return headers;\n};\n\n/**\n * Throws connection error.\n */\nconst throwConnectionError = (error) => {\n  throw new Error(error);\n}\n\nconst BaseAPI = (method, { url, body, token }, mockResponse) => {\n\n  const baseHeaders = new Headers();\n  // baseHeaders.append('Content-Type', 'application/json');\n  // baseHeaders.append('Accept', 'application/json');\n  const uri = `${baseUrl}/${url}`;\n\n  const params = {\n    method,\n    mode: 'cors',\n    headers: baseHeaders,\n    // dataType: 'json'\n  };\n\n  if (method !== 'GET') {\n    params.body = JSON.stringify(body)\n  }\n\n  logger.info(`${method}: `, uri, params);\n\n  if (mockResponse) {\n    return new Promise((resolve) => resolve(mockResponse))\n  }\n\n  return fetchWithTimeout(uri, params)\n      .catch(throwConnectionError)\n      .then(async response => {\n        await validateResponse(response);\n        return response;\n      })\n      .then(response => {\n        if (response.status === 401) {\n          return { code: response.status, message: response.statusText }\n        }\n\n        return response.json()\n      });\n}\n\nexport const POST = (url, body, token = null, mockResponse = undefined) => {\n  return BaseAPI('POST', {url, body, token}, mockResponse)\n}\n\nexport const PUT = (url, body, token = null, mockResponse = undefined) => {\n  return BaseAPI('PUT', {url, body, token}, mockResponse)\n}\n\nexport const PATCH = (url, body, token = null, mockResponse = undefined) => {\n  return BaseAPI('PATCH', {url, body, token}, mockResponse)\n}\n\nexport const GET = (url, body, token = null, mockResponse = undefined) => {\n  return BaseAPI('GET', {url, body, token}, mockResponse)\n}\n\nexport const DELETE = (url, body, token = null, mockResponse = undefined) => {\n  return BaseAPI('DELETE', {url, body, token}, mockResponse)\n}\n\n/**\n* Validates HTTP response and throws error if something goes wrong.\n* @param {Response} response\n*/\nconst validateResponse = async (response) => {\n // Redirect user to login screen if he is not authorized\n if (response.status === 401) {\n   return Promise.resolve(true);\n }\n\n if (response.status !== 200 || response.error) {\n   // if (!Config.__TEST__) {\n   logger.error(response);\n   // }\n }\n\n // if (Config.__TEST__) return Promise.resolve(true);\n if (__DEV__ && typeof response.clone === 'function') {\n   const clonedResponse = response.clone();\n   const body = await clonedResponse.json();\n\n   logger.info({\n     response,\n     body,\n   });\n } else {\n   logger.info(response);\n }\n\n return Promise.resolve(true);\n}\n"]},"metadata":{},"sourceType":"module"}