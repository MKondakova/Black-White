{"ast":null,"code":"var _jsxFileName = \"/Users/garinegorgmail.com/Downloads/gohackathon-base-client-instance-master/src/pages/GameBoard/components/Board/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Goban } from \"react-goban\";\nimport styled from \"styled-components\";\nimport { markersClear, setMapStones } from \"../../../../store/Board/actions\";\nimport { client } from \"../../../../Socket\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\n  width: 50%;\n  position: relative;\n  & > div {\n    position: absolute;\n    top: 0;\n    right: 0;\n    left: 0;\n  }\n  & svg {\n    width: 100%;\n    height: 100%;\n  }\n`;\n_c = Wrapper;\n\nconst Board = ({\n  lastMarkers,\n  socket,\n  setHint,\n  currentColor,\n  setCurrentColor,\n  yourColor,\n  helpType,\n  setMultipleHint,\n  multipleHint,\n  coordinates,\n  setCoordinates,\n  setHelpType,\n  setMultipleType,\n  setActiveHelpId,\n  setMapType,\n  setStonePosition,\n  classNames,\n  mapStones\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const markers = useSelector(state => state.board.markers);\n  const classNamesMapStones = useSelector(state => state.board.classNamesMapStones);\n\n  const handleTurn = stonePosition => {\n    client.send(JSON.stringify([7, \"go/game\", {\n      command: \"move\",\n      token: \"1cfc52aacaba0507e66d74cd878020f071457220\",\n      place: stonePosition.toString().toLowerCase(),\n      game_id: 8\n    }]));\n    let valid = true;\n\n    for (const key in coordinates) {\n      if (key === stonePosition) {\n        valid = false;\n      }\n    }\n\n    if (valid && currentColor === yourColor) {\n      setStonePosition(stonePosition); //setCoordinates({ ...coordinates, [stonePosition]: currentColor });\n\n      setCurrentColor(currentColor === \"white\" ? \"black\" : \"white\");\n      setHint(false);\n      dispatch(markersClear());\n      setHelpType(\"\");\n      setActiveHelpId(\"\");\n      setMultipleType(false);\n      setMapType(false);\n    }\n  };\n\n  const handleMultipleTurn = stonePosition => {\n    let valid = true;\n\n    for (const key in coordinates) {\n      if (key === stonePosition) {\n        valid = false;\n      }\n    }\n\n    if (valid) {\n      dispatch(setMapStones({ ...mapStones,\n        [stonePosition]: 'circle'\n      }));\n      setMultipleHint(stonePosition); //setCoordinates({ ...coordinates, [stonePosition]: currentColor });\n    }\n  };\n\n  let className;\n\n  if (currentColor !== yourColor) {\n    className = 'disabled';\n  } else {\n    className = '';\n  }\n\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    className: className,\n    children: /*#__PURE__*/_jsxDEV(Goban, {\n      style: {\n        position: \"absolute\"\n      },\n      stones: coordinates,\n      markers: markers,\n      lastMarkers: lastMarkers,\n      mapStones: mapStones,\n      classNamesMapStones: classNamesMapStones,\n      onIntersectionClick: helpType !== \"multiple\" ? handleTurn : handleMultipleTurn,\n      nextToPlay: yourColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Board, \"G300/reIZhzkr7g/Alt339QinPA=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c2 = Board;\nexport default Board;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"Board\");","map":{"version":3,"sources":["/Users/garinegorgmail.com/Downloads/gohackathon-base-client-instance-master/src/pages/GameBoard/components/Board/Board.js"],"names":["React","useState","useDispatch","useSelector","Goban","styled","markersClear","setMapStones","client","Wrapper","div","Board","lastMarkers","socket","setHint","currentColor","setCurrentColor","yourColor","helpType","setMultipleHint","multipleHint","coordinates","setCoordinates","setHelpType","setMultipleType","setActiveHelpId","setMapType","setStonePosition","classNames","mapStones","dispatch","markers","state","board","classNamesMapStones","handleTurn","stonePosition","send","JSON","stringify","command","token","place","toString","toLowerCase","game_id","valid","key","handleMultipleTurn","className","position"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Goban } from \"react-goban\";\nimport styled from \"styled-components\";\nimport { markersClear, setMapStones } from \"../../../../store/Board/actions\";\nimport { client } from \"../../../../Socket\";\n\nconst Wrapper = styled.div`\n  width: 50%;\n  position: relative;\n  & > div {\n    position: absolute;\n    top: 0;\n    right: 0;\n    left: 0;\n  }\n  & svg {\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nconst Board = ({\n  lastMarkers,\n  socket,\n  setHint,\n  currentColor,\n  setCurrentColor,\n  yourColor,\n  helpType,\n  setMultipleHint,\n  multipleHint,\n  coordinates,\n  setCoordinates,\n  setHelpType,\n  setMultipleType,\n  setActiveHelpId,\n  setMapType,\n  setStonePosition,\n  classNames,\n  mapStones\n}) => {\n  const dispatch = useDispatch();\n  const markers = useSelector((state) => state.board.markers);\n  const classNamesMapStones = useSelector(\n    (state) => state.board.classNamesMapStones\n  );\n\n  const handleTurn = (stonePosition) => {\n    client.send(JSON.stringify([7, \"go/game\", {command: \"move\", token: \"1cfc52aacaba0507e66d74cd878020f071457220\", place: stonePosition.toString().toLowerCase(), game_id: 8}]));\n    let valid = true;\n    for (const key in coordinates) {\n      if (key === stonePosition) {\n        valid = false;\n      }\n    }\n    if (valid && currentColor === yourColor) {\n      setStonePosition(stonePosition)\n      //setCoordinates({ ...coordinates, [stonePosition]: currentColor });\n      setCurrentColor(currentColor === \"white\" ? \"black\" : \"white\");\n      setHint(false);\n      dispatch(markersClear());\n      setHelpType(\"\");\n      setActiveHelpId(\"\");\n      setMultipleType(false);\n      setMapType(false);\n    }\n  };\n\n  const handleMultipleTurn = (stonePosition) => {\n    let valid = true;\n    for (const key in coordinates) {\n      if (key === stonePosition) {\n        valid = false;\n      }\n    }\n    if (valid) {\n      dispatch(setMapStones({ ...mapStones, [stonePosition]: 'circle' }))\n      setMultipleHint(stonePosition);\n      //setCoordinates({ ...coordinates, [stonePosition]: currentColor });\n    }\n  };\n\n  let className;\n  if (currentColor !== yourColor) {\n    className = 'disabled'\n  } else {\n    className = ''\n  }\n\n  return (\n    <Wrapper className={className}>\n        <Goban\n          style={{ position: \"absolute\" }}\n          stones={coordinates}\n          markers={markers}\n          lastMarkers={lastMarkers}\n          mapStones={mapStones}\n          classNamesMapStones={classNamesMapStones}\n          onIntersectionClick={\n            helpType !== \"multiple\" ? handleTurn : handleMultipleTurn\n          }\n          nextToPlay={yourColor}\n        />\n    </Wrapper>\n  );\n};\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}