{"ast":null,"code":"/**\n * SVGoban\n * geometry.js\n *\n */\nvar SV_GRID_SIZE = 560;\nvar SV_MARGIN = 30;\nvar SV_BORDER_SHRINK = 7;\nvar SV_MARKER = 2.5;\n/** ASCII decimal codes */\n\nvar CODE_9 = 59;\nvar CODE_A = 65;\nvar CODE_a = 97;\n/**\n * Defines horizontal label.\n *\n * @param {number} i index of column\n * @param {string} coordSystem (\"A1\" or \"aa\")\n * @returns {string}\n */\n\nvar horizontal = function (i, coordSystem) {\n  if (\"aa\" === coordSystem) {\n    return String.fromCharCode(CODE_a + --i);\n  } else {\n    // \"A1\" (default)\n    var skipI = i >= 9 ? 1 : 0;\n    return String.fromCharCode(CODE_A + --i + skipI);\n  }\n};\n/**\n * Defines vertical label.\n *\n * @param {number} j index of row\n * @param {string} coordSystem (\"A1\" or \"aa\")\n * @param {number} size the grid base (9, 13, 19)\n * @returns {string}\n */\n\n\nvar vertical = function (j, coordSystem, size) {\n  if (\"aa\" === coordSystem) {\n    return String.fromCharCode(CODE_a + --j);\n  } else {\n    // \"A1\" (default)\n    return (size - --j).toString();\n  }\n};\n/**\n * Calculates column and row of intersection.\n *\n * @param {string} intersection either in \"A1\" or \"aa\" coordinates\n * @param {number} size the grid base (9, 13, 19)\n * @returns {Object}\n */\n\n\nvar toColRow = function (intersection, size) {\n  var i, j;\n\n  if (intersection.charCodeAt(1) > CODE_9) {\n    // \"aa\"\n    i = intersection.charCodeAt(0) - CODE_a + 1;\n    j = intersection.charCodeAt(1) - CODE_a + 1;\n  } else {\n    // \"A1\"\n    i = intersection.charCodeAt(0) - CODE_A + 1;\n    var skipI = i >= 9 ? 1 : 0;\n    i -= skipI;\n    j = size - +intersection.substring(1) + 1;\n  }\n\n  return {\n    i: i,\n    j: j\n  };\n};\n/**\n * Translates intersection in other coordinate system.\n *\n * @param {string} intersection either in \"A1\" or \"aa\" coordinates\n * @param {number} size the grid base (9, 13, 19)\n * @returns {string}\n */\n\n\nvar other = function (intersection, size) {\n  var i, j, ret;\n\n  if (intersection.charCodeAt(1) > CODE_9) {\n    // \"aa\"\n    i = intersection.charCodeAt(0) - CODE_a + 1;\n    j = intersection.charCodeAt(1) - CODE_a + 1;\n    ret = horizontal(i, \"A1\") + vertical(j, \"A1\", size);\n  } else {\n    // \"A1\"\n    i = intersection.charCodeAt(0) - CODE_A + 1;\n    var skipI = i >= 9 ? 1 : 0;\n    i -= skipI;\n    j = size - +intersection.substring(1) + 1;\n    ret = horizontal(i, \"aa\") + vertical(j, \"aa\", size);\n  }\n\n  return ret;\n};\n/**\n * Shapes the background.\n *\n * @param {boolean} noMargin\n * @returns {Array} \n */\n\n\nexports.shapeBackground = function (noMargin) {\n  var offset, sz, cls;\n  var ret = [];\n  cls = \"wood\";\n\n  if (noMargin) {\n    offset = SV_MARGIN + SV_BORDER_SHRINK;\n    sz = SV_GRID_SIZE - 2 * SV_BORDER_SHRINK;\n  } else {\n    offset = 30;\n    sz = SV_GRID_SIZE + 2 * SV_MARGIN - 60;\n  }\n\n  ret.push({\n    type: \"rect\",\n    class: cls,\n    x: offset,\n    y: offset,\n    width: sz,\n    height: sz\n  });\n  return ret;\n};\n/**\n * Shapes the horizontal and vertical lines.\n *\n * @param {number} size the grid base (9, 13, 19)\n * @returns {Array} \n */\n\n\nexports.shapeGrid = function (size) {\n  size = +size;\n  var step = SV_GRID_SIZE / (size + 1);\n  var x1, y1, x2, y2;\n  var ret = [];\n  var s = {\n    \"stroke-width\": 1,\n    \"shape-rendering\": \"crispEdges\",\n    \"vector-effect\": \"non-scaling-stroke\"\n  };\n  var d = \"\";\n\n  for (var i = 1; i <= size; i++) {\n    x1 = SV_MARGIN + step;\n    y1 = SV_MARGIN + i * step;\n    x2 = SV_MARGIN + SV_GRID_SIZE - step;\n    y2 = SV_MARGIN + i * step;\n    d += \"M\" + x1 + \" \" + y1 + \"H \" + x2 + \" \";\n  }\n\n  for (var j = 1; j <= size; j++) {\n    x1 = SV_MARGIN + j * step;\n    y1 = SV_MARGIN + step;\n    x2 = SV_MARGIN + j * step;\n    y2 = SV_MARGIN + SV_GRID_SIZE - step;\n    d += \"M\" + x1 + \" \" + y1 + \"V \" + y2 + \" \";\n  }\n  /** Replace multiple lines with one SVG path */\n\n\n  ret.push({\n    type: \"path\",\n    d: d,\n    style: s\n  });\n  return ret;\n};\n/**\n * Shapes the star points (Hoshis).\n *\n * @param {number} size the grid base (9, 13, 19)\n * @returns {Array} \n */\n\n\nexports.shapeStarPoints = function (size) {\n  size = +size;\n  var step = SV_GRID_SIZE / (size + 1);\n  var cx, cy, r;\n  var ret = [];\n  var evenSize = size % 2;\n  var midStars = 1;\n  var starPadding = 4;\n\n  if (size < 12) {\n    starPadding = 3;\n    midStars = 0;\n  }\n\n  r = step / 10;\n  cx = SV_MARGIN + starPadding * step;\n  cy = SV_MARGIN + starPadding * step;\n  ret.push({\n    type: \"circle\",\n    cx: cx,\n    cy: cy,\n    r: r\n  });\n  cx = SV_MARGIN - starPadding * step + SV_GRID_SIZE;\n  cy = SV_MARGIN + starPadding * step;\n  ret.push({\n    type: \"circle\",\n    cx: cx,\n    cy: cy,\n    r: r\n  });\n  cx = SV_MARGIN + starPadding * step;\n  cy = SV_MARGIN - starPadding * step + SV_GRID_SIZE;\n  ret.push({\n    type: \"circle\",\n    cx: cx,\n    cy: cy,\n    r: r\n  });\n  cx = SV_MARGIN - starPadding * step + SV_GRID_SIZE;\n  cy = SV_MARGIN - starPadding * step + SV_GRID_SIZE;\n  ret.push({\n    type: \"circle\",\n    cx: cx,\n    cy: cy,\n    r: r\n  });\n  /** Central star point */\n\n  if (evenSize == 1) {\n    cx = SV_MARGIN + (size + 1) / 2 * step;\n    cy = SV_MARGIN + (size + 1) / 2 * step;\n    ret.push({\n      type: \"circle\",\n      cx: cx,\n      cy: cy,\n      r: r\n    });\n    /** 3rd star point */\n\n    if (midStars == 1) {\n      cx = SV_MARGIN + (size + 1) / 2 * step;\n      cy = SV_MARGIN + starPadding * step;\n      ret.push({\n        type: \"circle\",\n        cx: cx,\n        cy: cy,\n        r: r\n      });\n      cx = SV_MARGIN + starPadding * step;\n      cy = SV_MARGIN + (size + 1) / 2 * step;\n      ret.push({\n        type: \"circle\",\n        cx: cx,\n        cy: cy,\n        r: r\n      });\n      cx = SV_MARGIN + (size + 1) / 2 * step;\n      cy = SV_MARGIN - starPadding * step + SV_GRID_SIZE;\n      ret.push({\n        type: \"circle\",\n        cx: cx,\n        cy: cy,\n        r: r\n      });\n      cx = SV_MARGIN - starPadding * step + SV_GRID_SIZE;\n      cy = SV_MARGIN + (size + 1) / 2 * step;\n      ret.push({\n        type: \"circle\",\n        cx: cx,\n        cy: cy,\n        r: r\n      });\n    }\n  }\n\n  return ret;\n};\n/**\n * Shapes the axis labels.\n *\n * @param {number} size the grid base (9, 13, 19)\n * @returns {Array} \n */\n\n\nexports.shapeLabels = function (size, coordSystem) {\n  size = +size;\n  coordSystem = coordSystem || \"A1\";\n  var step = SV_GRID_SIZE / (size + 1);\n  var x, y, txt;\n  var ret = [];\n\n  for (var i = 1; i <= size; i++) {\n    /** Top row */\n    x = SV_MARGIN + i * step;\n    y = SV_MARGIN + 25;\n    txt = horizontal(i, coordSystem);\n    var s = {\n      \"text-anchor\": \"middle\"\n    };\n    ret.push({\n      type: \"text\",\n      x: x,\n      y: y,\n      txt: txt,\n      style: s\n    });\n    /** Bottom row */\n\n    x = SV_MARGIN + i * step;\n    y = SV_MARGIN + SV_GRID_SIZE - 15;\n    txt = horizontal(i, coordSystem);\n    var s = {\n      \"text-anchor\": \"middle\"\n    };\n    ret.push({\n      type: \"text\",\n      x: x,\n      y: y,\n      txt: txt,\n      style: s\n    });\n  }\n\n  for (var j = 1; j <= size; j++) {\n    /** Left column */\n    x = SV_MARGIN + 25;\n    y = SV_MARGIN + j * step;\n    txt = vertical(j, coordSystem, size);\n    var s = {\n      \"text-anchor\": \"end\",\n      \"dominant-baseline\": \"central\"\n    };\n    ret.push({\n      type: \"text\",\n      x: x,\n      y: y,\n      txt: txt,\n      style: s\n    });\n    /** Right column */\n\n    x = SV_MARGIN + SV_GRID_SIZE - 25;\n    y = SV_MARGIN + j * step;\n    txt = vertical(j, coordSystem, size);\n    var s = {\n      \"text-anchor\": \"start\",\n      \"dominant-baseline\": \"central\"\n    };\n    ret.push({\n      type: \"text\",\n      x: x,\n      y: y,\n      txt: txt,\n      style: s\n    });\n  }\n\n  return ret;\n};\n/**\n * Shapes the stones and placeholders.\n *\n * @param {number} size the grid base (9, 13, 19)\n * @param {Object} positions as key-value pairs of coordinates and colors\n * @returns {Array} \n */\n\n\nexports.shapeStones = function (size, positions) {\n  size = +size;\n  var step = SV_GRID_SIZE / (size + 1);\n  var cx, cy, r, cls;\n  var ret = [];\n  var hA1, haa, vA1, vaa, target, coordA1;\n\n  for (var i = 1; i <= size; i++) {\n    hA1 = horizontal(i, \"A1\");\n    haa = horizontal(i, \"aa\");\n    cx = SV_MARGIN + i * step;\n\n    for (var j = 1; j <= size; j++) {\n      vA1 = vertical(j, \"A1\", size);\n      vaa = vertical(j, \"aa\", size);\n      coordA1 = hA1 + vA1;\n      target = positions[hA1 + vA1] || positions[haa + vaa];\n      cls = \"stone\";\n      cls += target ? \" \" + target + \"stone\" : \" placeholder\";\n      cls += \" \" + coordA1;\n      cy = SV_MARGIN + j * step;\n      r = step / 2.1;\n      ret.push({\n        type: \"circle\",\n        key: coordA1,\n        cx: cx,\n        cy: cy,\n        r: r,\n        class: cls\n      });\n    }\n  }\n\n  return ret;\n};\n/**\n * Shapes a specific intersection.\n *\n * @param {number} size the grid base (9, 13, 19)\n * @param {string} intersection\n * @param {string} color (\"black\"/\"white\"/\"placeholder\")\n * @returns {Array}\n */\n\n\nexports.shapeStone = function (size, intersection, color) {\n  size = +size;\n  var step = SV_GRID_SIZE / (size + 1);\n  var cx, cy, r, cls;\n  var ret = [];\n  var rowcol = toColRow(intersection, size);\n  cls = \"stone\";\n  color = color == \"placeholder\" ? color : color + cls;\n  cls += \" \" + color;\n  cls += \" \" + intersection;\n  cx = SV_MARGIN + rowcol.i * step;\n  cy = SV_MARGIN + rowcol.j * step;\n  r = step / 2.1;\n  ret.push({\n    type: \"circle\",\n    key: intersection,\n    cx: cx,\n    cy: cy,\n    r: r,\n    class: cls\n  });\n  return ret;\n};\n/**\n * Shapes the last stone played marker.\n *\n * @param {number} size the grid base (9, 13, 19)\n * @param {Object} markers\n * @param {Object} positions as key-value pairs of coordinates and colors\n * @returns {Array}\n */\n\n\nexports.mapMarkers = function (size, markers, positions, className) {\n  size = +size;\n  var step = SV_GRID_SIZE / (size + 1);\n  var x, y, x1, y1, x2, y2, cls, points;\n  var ret = [];\n  var coord;\n\n  for (var k in markers) {\n    var rowcol = toColRow(k, size);\n    x = SV_MARGIN + rowcol.i * step;\n    y = SV_MARGIN + rowcol.j * step;\n\n    if (\"cross\" == markers[k]) {\n      cls = markers[k] + ' ' + className[k] + \" on\" + (positions[k] || \"white\");\n      x1 = x - step / SV_MARKER;\n      y1 = y;\n      x2 = x + step / SV_MARKER;\n      y2 = y;\n      rot = \"rotate(45,\" + x + \",\" + y + \")\";\n      ret.push({\n        type: \"line\",\n        x1: x1,\n        y1: y1,\n        x2: x2,\n        y2: y2,\n        class: cls,\n        transform: rot\n      });\n      y1 = y - step / SV_MARKER;\n      x1 = x;\n      y2 = y + step / SV_MARKER;\n      x2 = x;\n      ret.push({\n        type: \"line\",\n        x1: x1,\n        y1: y1,\n        x2: x2,\n        y2: y2,\n        class: cls,\n        transform: rot\n      });\n    } else if (\"circle\" == markers[k]) {\n      cls = markers[k] + ' ' + className[k] + \" on\" + (positions[k] || positions[other(k, size)] || \"white\");\n      r = step / 3.5;\n      ret.push({\n        type: \"circle\",\n        cx: x,\n        cy: y,\n        r: r,\n        class: cls\n      });\n    } else if (\"square\" == markers[k]) {\n      cls = markers[k] + ' ' + className[k] + \" on\" + (positions[k] || \"white\");\n      var delta = step / SV_MARKER * Math.cos(Math.PI / 4);\n      var side = 2 * delta;\n      x1 = x - delta;\n      y1 = y - delta;\n      ret.push({\n        type: \"rect\",\n        x: x1,\n        y: y1,\n        width: side,\n        height: side,\n        class: cls\n      });\n    } else if (\"triangle\" == markers[k]) {\n      cls = markers[k] + ' ' + className[k] + \" on\" + (positions[k] || \"white\");\n      x1 = x;\n      y1 = y - step / SV_MARKER;\n      x2 = x + step / SV_MARKER * Math.cos(Math.PI / 2 + 2 * Math.PI / 3);\n      y2 = y - step / SV_MARKER * Math.sin(Math.PI / 2 + 2 * Math.PI / 3);\n      x3 = x + step / SV_MARKER * Math.cos(Math.PI / 2 + 4 * Math.PI / 3);\n      y3 = y - step / SV_MARKER * Math.sin(Math.PI / 2 + 4 * Math.PI / 3);\n      points = x1 + \",\" + y1 + \" \" + x2 + \",\" + y2 + \" \" + x3 + \",\" + y3;\n      ret.push({\n        type: \"polygon\",\n        points: points,\n        class: cls\n      });\n    } else {\n      cls = \"wood\";\n      r = step / 3;\n      ret.push({\n        type: \"circle\",\n        cx: x,\n        cy: y,\n        r: r,\n        class: cls\n      });\n      cls = \"on\" + (positions[k] || \"white\");\n      var txt = markers[k];\n      var s = {\n        \"text-anchor\": \"middle\",\n        \"dominant-baseline\": \"central\"\n      };\n      ret.push({\n        type: \"text\",\n        x: x,\n        y: y,\n        txt: txt,\n        style: s\n      });\n    }\n  }\n\n  return ret;\n};\n\nexports.shapeMarkers = function (size, markers, positions, className) {\n  size = +size;\n  var step = SV_GRID_SIZE / (size + 1);\n  var x, y, x1, y1, x2, y2, cls, points;\n  var ret = [];\n  var coord;\n\n  for (var k in markers) {\n    var rowcol = toColRow(k, size);\n    x = SV_MARGIN + rowcol.i * step;\n    y = SV_MARGIN + rowcol.j * step;\n\n    if (\"cross\" == markers[k]) {\n      cls = markers[k] + ' ' + className + \" on\" + (positions[k] || \"white\");\n      x1 = x - step / SV_MARKER;\n      y1 = y;\n      x2 = x + step / SV_MARKER;\n      y2 = y;\n      rot = \"rotate(45,\" + x + \",\" + y + \")\";\n      ret.push({\n        type: \"line\",\n        x1: x1,\n        y1: y1,\n        x2: x2,\n        y2: y2,\n        class: cls,\n        transform: rot\n      });\n      y1 = y - step / SV_MARKER;\n      x1 = x;\n      y2 = y + step / SV_MARKER;\n      x2 = x;\n      ret.push({\n        type: \"line\",\n        x1: x1,\n        y1: y1,\n        x2: x2,\n        y2: y2,\n        class: cls,\n        transform: rot\n      });\n    } else if (\"circle\" == markers[k]) {\n      cls = markers[k] + ' ' + className + \" on\" + (positions[k] || positions[other(k, size)] || \"white\");\n      r = step / 3.5;\n      ret.push({\n        type: \"circle\",\n        cx: x,\n        cy: y,\n        r: r,\n        class: cls\n      });\n    } else if (\"square\" == markers[k]) {\n      cls = markers[k] + ' ' + className + \" on\" + (positions[k] || \"white\");\n      var delta = step / SV_MARKER * Math.cos(Math.PI / 4);\n      var side = 2 * delta;\n      x1 = x - delta;\n      y1 = y - delta;\n      ret.push({\n        type: \"rect\",\n        x: x1,\n        y: y1,\n        width: side,\n        height: side,\n        class: cls\n      });\n    } else if (\"triangle\" == markers[k]) {\n      cls = markers[k] + ' ' + className + \" on\" + (positions[k] || \"white\");\n      x1 = x;\n      y1 = y - step / SV_MARKER;\n      x2 = x + step / SV_MARKER * Math.cos(Math.PI / 2 + 2 * Math.PI / 3);\n      y2 = y - step / SV_MARKER * Math.sin(Math.PI / 2 + 2 * Math.PI / 3);\n      x3 = x + step / SV_MARKER * Math.cos(Math.PI / 2 + 4 * Math.PI / 3);\n      y3 = y - step / SV_MARKER * Math.sin(Math.PI / 2 + 4 * Math.PI / 3);\n      points = x1 + \",\" + y1 + \" \" + x2 + \",\" + y2 + \" \" + x3 + \",\" + y3;\n      ret.push({\n        type: \"polygon\",\n        points: points,\n        class: cls\n      });\n    } else {\n      cls = \"wood\";\n      r = step / 3;\n      ret.push({\n        type: \"circle\",\n        cx: x,\n        cy: y,\n        r: r,\n        class: cls\n      });\n      cls = \"on\" + (positions[k] || \"white\");\n      var txt = markers[k];\n      var s = {\n        \"text-anchor\": \"middle\",\n        \"dominant-baseline\": \"central\"\n      };\n      ret.push({\n        type: \"text\",\n        x: x,\n        y: y,\n        txt: txt,\n        style: s\n      });\n    }\n  }\n\n  return ret;\n};\n/**\n * Shapes the visible area.\n *\n * @param {boolean} hideMargin\n * @param {Object} zoom\n * @param {number} size the grid base (9, 13, 19)\n * @returns {Array} viewBox (visible area)\n */\n\n\nexports.shapeArea = function (hideMargin, zoom, size) {\n  var offsetX, offsetY, lX, lY;\n\n  if (hideMargin) {\n    offsetX = offsetY = SV_MARGIN + SV_BORDER_SHRINK;\n    lX = lY = SV_GRID_SIZE - 2 * SV_BORDER_SHRINK;\n  } else {\n    offsetX = offsetY = 0;\n    lX = lY = SV_GRID_SIZE + 2 * SV_MARGIN;\n  }\n\n  if (zoom) {\n    size = +size;\n    var step = SV_GRID_SIZE / (size + 1);\n    var border = step / 2;\n\n    if (\"point\" == zoom.mode) {\n      var coord = toColRow(zoom.center, size);\n      offsetX += (coord.i - (size + 1) / 2) * step;\n      offsetY += (coord.j - (size + 1) / 2) * step;\n      offsetX += (1 / 2 - 1 / (2 * zoom.ratio)) * lX;\n      offsetY += (1 / 2 - 1 / (2 * zoom.ratio)) * lY;\n      lX /= zoom.ratio;\n      lY /= zoom.ratio;\n    } else if (\"zone\" == zoom.mode) {\n      switch (zoom.region) {\n        case \"NW\":\n          offsetX += 0;\n          offsetY += 0;\n          lX = lX / 2 + border;\n          lY = lY / 2 + border;\n          break;\n\n        case \"NE\":\n          offsetX += lX / 2 - border;\n          offsetY += 0;\n          lX = lX / 2 + border;\n          lY = lY / 2 + border;\n          break;\n\n        case \"SE\":\n          offsetX += lX / 2 - border;\n          offsetY += lY / 2 - border;\n          lX = lX / 2 + border;\n          lY = lY / 2 + border;\n          break;\n\n        case \"SW\":\n          offsetX += 0;\n          offsetY += lY / 2 - border;\n          lX = lX / 2 + border;\n          lY = lY / 2 + border;\n          break;\n      }\n    }\n  }\n\n  return [offsetX, offsetY, lX, lY];\n};","map":{"version":3,"sources":["/Users/garinegorgmail.com/Downloads/gohackathon-base-client-instance-master/node_modules/svgoban/src/geometry.js"],"names":["SV_GRID_SIZE","SV_MARGIN","SV_BORDER_SHRINK","SV_MARKER","CODE_9","CODE_A","CODE_a","horizontal","i","coordSystem","String","fromCharCode","skipI","vertical","j","size","toString","toColRow","intersection","charCodeAt","substring","other","ret","exports","shapeBackground","noMargin","offset","sz","cls","push","type","class","x","y","width","height","shapeGrid","step","x1","y1","x2","y2","s","d","style","shapeStarPoints","cx","cy","r","evenSize","midStars","starPadding","shapeLabels","txt","shapeStones","positions","hA1","haa","vA1","vaa","target","coordA1","key","shapeStone","color","rowcol","mapMarkers","markers","className","points","coord","k","rot","transform","delta","Math","cos","PI","side","sin","x3","y3","shapeMarkers","shapeArea","hideMargin","zoom","offsetX","offsetY","lX","lY","border","mode","center","ratio","region"],"mappings":"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","sourcesContent":["/**\n * SVGoban\n * geometry.js\n *\n */\n\nvar SV_GRID_SIZE = 560;\nvar SV_MARGIN = 30;\nvar SV_BORDER_SHRINK = 7;\nvar SV_MARKER = 2.5;\n\n/** ASCII decimal codes */\nvar CODE_9 = 59;\nvar CODE_A = 65;\nvar CODE_a = 97;\n\n\n/**\n * Defines horizontal label.\n *\n * @param {number} i index of column\n * @param {string} coordSystem (\"A1\" or \"aa\")\n * @returns {string}\n */\nvar horizontal = function(i, coordSystem) {\n    if (\"aa\" === coordSystem) {\n\treturn String.fromCharCode(CODE_a + --i);\n    }\n    else { // \"A1\" (default)\n\tvar skipI = i >= 9 ? 1 : 0;\n\treturn String.fromCharCode(CODE_A + --i + skipI);\n    }\n}\n\n/**\n * Defines vertical label.\n *\n * @param {number} j index of row\n * @param {string} coordSystem (\"A1\" or \"aa\")\n * @param {number} size the grid base (9, 13, 19)\n * @returns {string}\n */\nvar vertical = function(j, coordSystem, size) {\n    if (\"aa\" === coordSystem) {\n\treturn String.fromCharCode(CODE_a + --j);\n    }\n    else { // \"A1\" (default)\n\treturn (size - --j).toString();\n    }\n}\n\n/**\n * Calculates column and row of intersection.\n *\n * @param {string} intersection either in \"A1\" or \"aa\" coordinates\n * @param {number} size the grid base (9, 13, 19)\n * @returns {Object}\n */\nvar toColRow = function(intersection, size) {\n    var i, j;\n    if (intersection.charCodeAt(1) > CODE_9) { // \"aa\"\n\ti = intersection.charCodeAt(0) - CODE_a + 1;\n\tj = intersection.charCodeAt(1) - CODE_a + 1;\n    }\n    else { // \"A1\"\n\ti = intersection.charCodeAt(0) - CODE_A + 1;\n\tvar skipI = i >= 9 ? 1 : 0;\n\ti -= skipI;\n\tj = size - (+intersection.substring(1)) + 1;\n    }\n    return {i: i, j: j};\n}\n\n/**\n * Translates intersection in other coordinate system.\n *\n * @param {string} intersection either in \"A1\" or \"aa\" coordinates\n * @param {number} size the grid base (9, 13, 19)\n * @returns {string}\n */\nvar other = function(intersection, size) {\n    var i, j, ret;\n    if (intersection.charCodeAt(1) > CODE_9) { // \"aa\"\n\ti = intersection.charCodeAt(0) - CODE_a + 1;\n\tj = intersection.charCodeAt(1) - CODE_a + 1;\n\tret = horizontal(i, \"A1\") + vertical(j, \"A1\", size);\n    }\n    else { // \"A1\"\n\ti = intersection.charCodeAt(0) - CODE_A + 1;\n\tvar skipI = i >= 9 ? 1 : 0;\n\ti -= skipI;\n\tj = size - (+intersection.substring(1)) + 1;\n\tret = horizontal(i, \"aa\") + vertical(j, \"aa\", size);\n    }\n    return ret;\n}\n\n\n/**\n * Shapes the background.\n *\n * @param {boolean} noMargin\n * @returns {Array} \n */\nexports.shapeBackground = function(noMargin) {\n    var offset, sz, cls;\n    var ret = [];\n\n    cls = \"wood\";\n    if (noMargin) {\n\toffset = SV_MARGIN + SV_BORDER_SHRINK;\n\tsz = SV_GRID_SIZE - 2*SV_BORDER_SHRINK;\n    } else {\n\toffset = 30;\n\tsz = SV_GRID_SIZE + 2*SV_MARGIN - 60;\n    }\n    ret.push({type:\"rect\", class:cls, x:offset, y:offset, width:sz, height:sz});\n    return ret;\n}\n\n/**\n * Shapes the horizontal and vertical lines.\n *\n * @param {number} size the grid base (9, 13, 19)\n * @returns {Array} \n */\nexports.shapeGrid = function(size) {\n    size = +size;\n    var step = SV_GRID_SIZE / (size + 1);\n    var x1, y1, x2, y2;\n    var ret = [];\n\n    var s = {\n\t\"stroke-width\":1, \n\t\"shape-rendering\":\"crispEdges\",\n\t\"vector-effect\":\"non-scaling-stroke\"\n    };\n\n    var d = \"\";\n    for (var i = 1; i <= size; i++) {\n\tx1 = SV_MARGIN + step;\n\ty1 = SV_MARGIN + i * step;\n\tx2 = SV_MARGIN + SV_GRID_SIZE - step;\n\ty2 = SV_MARGIN + i * step;\n\td += \"M\" + x1 + \" \" + y1 + \"H \" + x2 + \" \";\n    }\n    for (var j = 1; j <= size; j++) {\n\tx1 = SV_MARGIN + j * step;\n\ty1 = SV_MARGIN + step;\n\tx2 = SV_MARGIN + j * step;\n\ty2 = SV_MARGIN + SV_GRID_SIZE - step;\n\td += \"M\" + x1 + \" \" + y1 + \"V \" + y2 + \" \";\n    } \n    /** Replace multiple lines with one SVG path */\n    ret.push({type:\"path\", d:d, style:s});\n    return ret;\n}\n\n/**\n * Shapes the star points (Hoshis).\n *\n * @param {number} size the grid base (9, 13, 19)\n * @returns {Array} \n */\nexports.shapeStarPoints = function(size) {\n    size = +size;\n    var step = SV_GRID_SIZE / (size + 1);\n    var cx, cy, r;\n    var ret = [];\n    var evenSize = size % 2;\n    var midStars = 1;\n    var starPadding = 4;\n    if (size < 12) {\n\tstarPadding = 3;\n\tmidStars = 0;\n    }\n    r = step / 10;\n    cx = SV_MARGIN + starPadding * step;\n    cy = SV_MARGIN + starPadding * step;\n    ret.push({type:\"circle\", cx:cx, cy:cy, r:r});\n    cx = SV_MARGIN - starPadding * step + SV_GRID_SIZE;\n    cy = SV_MARGIN + starPadding * step;\n    ret.push({type:\"circle\", cx:cx, cy:cy, r:r});\n    cx = SV_MARGIN + starPadding * step;\n    cy = SV_MARGIN - starPadding * step + SV_GRID_SIZE;\n    ret.push({type:\"circle\", cx:cx, cy:cy, r:r});\n    cx = SV_MARGIN - starPadding * step + SV_GRID_SIZE;\n    cy = SV_MARGIN - starPadding * step + SV_GRID_SIZE;\n    ret.push({type:\"circle\", cx:cx, cy:cy, r:r});\n    /** Central star point */\n    if (evenSize == 1) {\n\tcx = SV_MARGIN + (size + 1) / 2 * step;\n\tcy = SV_MARGIN + (size + 1) / 2 * step;\n\tret.push({type:\"circle\", cx:cx, cy:cy, r:r});\n\t/** 3rd star point */\n\tif (midStars == 1) {\n\tcx = SV_MARGIN + (size + 1) / 2 * step;\n\tcy = SV_MARGIN + starPadding * step;\n\tret.push({type:\"circle\", cx:cx, cy:cy, r:r});\n\tcx = SV_MARGIN + starPadding * step;\n\tcy = SV_MARGIN + (size + 1) / 2 * step;\n\tret.push({type:\"circle\", cx:cx, cy:cy, r:r});\n\tcx = SV_MARGIN + (size + 1) / 2 * step;\n\tcy = SV_MARGIN - starPadding * step + SV_GRID_SIZE;\n\tret.push({type:\"circle\", cx:cx, cy:cy, r:r});\n\tcx = SV_MARGIN - starPadding * step + SV_GRID_SIZE;\n\tcy = SV_MARGIN + (size + 1) / 2 * step;\n\tret.push({type:\"circle\", cx:cx, cy:cy, r:r});\n\t}\n    }\n    return ret;\n}\n\n/**\n * Shapes the axis labels.\n *\n * @param {number} size the grid base (9, 13, 19)\n * @returns {Array} \n */\nexports.shapeLabels = function(size, coordSystem) {\n    size = +size;\n    coordSystem = coordSystem || \"A1\";\n    var step = SV_GRID_SIZE / (size + 1);\n    var x, y, txt;\n    var ret = [];\n    \n    for ( var i = 1; i <= size; i++ ) {\n\n\t/** Top row */\n\tx = SV_MARGIN + i * step;\n\ty = SV_MARGIN + 25;\n\ttxt = horizontal(i, coordSystem);\n\tvar s = {\n\t    \"text-anchor\":\"middle\" \n\t};\n\tret.push({type:\"text\", x:x, y:y, txt:txt, style:s});\n\n\t/** Bottom row */\n\tx = SV_MARGIN + i * step;\n\ty = SV_MARGIN + SV_GRID_SIZE - 15;\n\ttxt = horizontal(i, coordSystem);\n\tvar s = {\n\t    \"text-anchor\":\"middle\" \n\t};\n\tret.push({type:\"text\", x:x, y:y, txt:txt, style:s});\n    }\n    for ( var j = 1; j <= size; j++ ) {\n\n\t/** Left column */\n\tx = SV_MARGIN + 25;\n\ty = SV_MARGIN + j * step;\n\ttxt = vertical(j, coordSystem, size);\n\tvar s = {\n\t    \"text-anchor\":\"end\", \n\t    \"dominant-baseline\":\"central\"\n\t};\n\tret.push({type:\"text\", x:x, y:y, txt:txt, style:s});\n\n\t/** Right column */\n\tx = SV_MARGIN + SV_GRID_SIZE - 25;\n\ty = SV_MARGIN + j * step;\n\ttxt = vertical(j, coordSystem, size);\n\tvar s = {\n\t    \"text-anchor\":\"start\", \n\t    \"dominant-baseline\":\"central\"\n\t};\n\tret.push({type:\"text\", x:x, y:y, txt:txt, style:s});\n    }\n    return ret;\n}\n\n/**\n * Shapes the stones and placeholders.\n *\n * @param {number} size the grid base (9, 13, 19)\n * @param {Object} positions as key-value pairs of coordinates and colors\n * @returns {Array} \n */\nexports.shapeStones = function(size, positions) {\n    size = +size;\n    var step = SV_GRID_SIZE / (size + 1);\n    var cx, cy, r, cls;\n    var ret = [];\n    var hA1, haa, vA1, vaa, target, coordA1;\n\n    for ( var i = 1; i <= size; i++ ) {\n\thA1 = horizontal(i, \"A1\");\n\thaa = horizontal(i, \"aa\");\n\tcx = SV_MARGIN + i * step;\n\n\tfor ( var j = 1; j <= size; j++ ) {\n\t    vA1 = vertical(j, \"A1\", size);\n\t    vaa = vertical(j, \"aa\", size);\n\t    coordA1 = hA1 + vA1;\n\t    target = positions[hA1 + vA1] || positions[haa + vaa];\n\n\t    cls = \"stone\";\n\t    cls += target ? \" \" + target + \"stone\" : \" placeholder\";\n\t    cls += \" \" + coordA1;\n\n\t    cy = SV_MARGIN + j * step;\n\t    r = step / 2.1;\n\t    ret.push({type:\"circle\", key:coordA1, cx:cx, cy:cy, r:r, class:cls });\n\t}\n    }\n    return ret;\n}\n\n/**\n * Shapes a specific intersection.\n *\n * @param {number} size the grid base (9, 13, 19)\n * @param {string} intersection\n * @param {string} color (\"black\"/\"white\"/\"placeholder\")\n * @returns {Array}\n */\nexports.shapeStone = function(size, intersection, color) {\n    size = +size;\n    var step = SV_GRID_SIZE / (size + 1);\n    var cx, cy, r, cls;\n    var ret = [];\n    var rowcol = toColRow(intersection, size);\n    cls = \"stone\";\n    color = (color == \"placeholder\") ? color : color + cls;\n    cls += \" \" + color;\n    cls += \" \" + intersection;\n    cx = SV_MARGIN + rowcol.i * step;\n    cy = SV_MARGIN + rowcol.j * step;\n    r = step / 2.1;\n    ret.push({type:\"circle\", key:intersection, cx:cx, cy:cy, r:r, class:cls });\n    return ret;\n}\n\n/**\n * Shapes the last stone played marker.\n *\n * @param {number} size the grid base (9, 13, 19)\n * @param {Object} markers\n * @param {Object} positions as key-value pairs of coordinates and colors\n * @returns {Array}\n */\nexports.mapMarkers = function(size, markers, positions, className) {\n    size = +size;\n    var step = SV_GRID_SIZE / (size + 1);\n    var x, y, x1, y1, x2, y2, cls, points;\n    var ret = [];\n    var coord;\n\n    for (var k in markers) {\n\n\tvar rowcol = toColRow(k, size);\n\tx = SV_MARGIN + rowcol.i * step;\n\ty = SV_MARGIN + rowcol.j * step;\n\n\tif (\"cross\" == markers[k]) {\n\t    cls = markers[k] + ' ' + className[k] + \" on\" + (positions[k] || \"white\");\n\t    x1 = x - step / SV_MARKER;\n\t    y1 = y;\n\t    x2 = x + step / SV_MARKER;\n\t    y2 = y;\n\t    rot = \"rotate(45,\" + x + \",\" + y + \")\";\n\t    ret.push({type:\"line\", x1:x1, y1:y1, x2:x2, y2:y2, class:cls, transform:rot});\n\t    y1 = y - step / SV_MARKER;\n\t    x1 = x;\n\t    y2 = y + step / SV_MARKER;\n\t    x2 = x;\n\t    ret.push({type:\"line\", x1:x1, y1:y1, x2:x2, y2:y2, class:cls, transform:rot});\n\n\t} else if (\"circle\" == markers[k]) {\n\t    cls = markers[k] + ' ' + className[k] + \" on\" + (positions[k] || positions[other(k, size)] || \"white\");\n\t    r = step / 3.5;\n\t    ret.push({type:\"circle\", cx:x, cy:y, r:r, class:cls });\n\n\t} else if (\"square\" == markers[k]) {\n\t    cls = markers[k] + ' ' + className[k] + \" on\" + (positions[k] || \"white\");\n\t    var delta = step / SV_MARKER * Math.cos(Math.PI / 4);\n\t    var side = 2 * delta;\n\t    x1 = x - delta;\n\t    y1 = y - delta;\n\t    ret.push({type:\"rect\", x:x1, y:y1, width:side, height:side, class:cls});\n\n\t} else if (\"triangle\" == markers[k]) {\n\t    cls = markers[k] + ' ' + className[k] + \" on\" + (positions[k] || \"white\");\n\t    x1 = x;\n\t    y1 = y - step / SV_MARKER;\n\t    x2 = x + step / SV_MARKER * Math.cos(Math.PI / 2 + 2 * Math.PI / 3);\n\t    y2 = y - step / SV_MARKER * Math.sin(Math.PI / 2 + 2 * Math.PI / 3);\n\t    x3 = x + step / SV_MARKER * Math.cos(Math.PI / 2 + 4 * Math.PI / 3);\n\t    y3 = y - step / SV_MARKER * Math.sin(Math.PI / 2 + 4 * Math.PI / 3);\n\t    points = x1 + \",\" + y1 + \" \" + x2 + \",\" + y2 + \" \" + x3 + \",\" + y3;\n\t    ret.push({type:\"polygon\", points:points, class:cls});\n\t} else {\n\t    cls = \"wood\";\n\t    r = step / 3;\n\t    ret.push({type:\"circle\", cx:x, cy:y, r:r, class:cls });\n\t    cls = \"on\" + (positions[k] || \"white\");\n\t    var txt = markers[k];\n\t    var s = {\n\t\t\"text-anchor\":\"middle\", \n\t\t\"dominant-baseline\":\"central\"\n\t    };\n\t    ret.push({type:\"text\", x:x, y:y, txt:txt, style:s});\n\t}\n    }\n    return ret;\n}\n\nexports.shapeMarkers = function(size, markers, positions, className) {\n    size = +size;\n    var step = SV_GRID_SIZE / (size + 1);\n    var x, y, x1, y1, x2, y2, cls, points;\n    var ret = [];\n    var coord;\n\n    for (var k in markers) {\n\n\tvar rowcol = toColRow(k, size);\n\tx = SV_MARGIN + rowcol.i * step;\n\ty = SV_MARGIN + rowcol.j * step;\n\n\tif (\"cross\" == markers[k]) {\n\t    cls = markers[k] + ' ' + className + \" on\" + (positions[k] || \"white\");\n\t    x1 = x - step / SV_MARKER;\n\t    y1 = y;\n\t    x2 = x + step / SV_MARKER;\n\t    y2 = y;\n\t    rot = \"rotate(45,\" + x + \",\" + y + \")\";\n\t    ret.push({type:\"line\", x1:x1, y1:y1, x2:x2, y2:y2, class:cls, transform:rot});\n\t    y1 = y - step / SV_MARKER;\n\t    x1 = x;\n\t    y2 = y + step / SV_MARKER;\n\t    x2 = x;\n\t    ret.push({type:\"line\", x1:x1, y1:y1, x2:x2, y2:y2, class:cls, transform:rot});\n\n\t} else if (\"circle\" == markers[k]) {\n\t    cls = markers[k] + ' ' + className + \" on\" + (positions[k] || positions[other(k, size)] || \"white\");\n\t    r = step / 3.5;\n\t    ret.push({type:\"circle\", cx:x, cy:y, r:r, class:cls });\n\n\t} else if (\"square\" == markers[k]) {\n\t    cls = markers[k] + ' ' + className + \" on\" + (positions[k] || \"white\");\n\t    var delta = step / SV_MARKER * Math.cos(Math.PI / 4);\n\t    var side = 2 * delta;\n\t    x1 = x - delta;\n\t    y1 = y - delta;\n\t    ret.push({type:\"rect\", x:x1, y:y1, width:side, height:side, class:cls});\n\n\t} else if (\"triangle\" == markers[k]) {\n\t    cls = markers[k] + ' ' + className + \" on\" + (positions[k] || \"white\");\n\t    x1 = x;\n\t    y1 = y - step / SV_MARKER;\n\t    x2 = x + step / SV_MARKER * Math.cos(Math.PI / 2 + 2 * Math.PI / 3);\n\t    y2 = y - step / SV_MARKER * Math.sin(Math.PI / 2 + 2 * Math.PI / 3);\n\t    x3 = x + step / SV_MARKER * Math.cos(Math.PI / 2 + 4 * Math.PI / 3);\n\t    y3 = y - step / SV_MARKER * Math.sin(Math.PI / 2 + 4 * Math.PI / 3);\n\t    points = x1 + \",\" + y1 + \" \" + x2 + \",\" + y2 + \" \" + x3 + \",\" + y3;\n\t    ret.push({type:\"polygon\", points:points, class:cls});\n\t} else {\n\t    cls = \"wood\";\n\t    r = step / 3;\n\t    ret.push({type:\"circle\", cx:x, cy:y, r:r, class:cls });\n\t    cls = \"on\" + (positions[k] || \"white\");\n\t    var txt = markers[k];\n\t    var s = {\n\t\t\"text-anchor\":\"middle\", \n\t\t\"dominant-baseline\":\"central\"\n\t    };\n\t    ret.push({type:\"text\", x:x, y:y, txt:txt, style:s});\n\t}\n    }\n    return ret;\n}\n\n/**\n * Shapes the visible area.\n *\n * @param {boolean} hideMargin\n * @param {Object} zoom\n * @param {number} size the grid base (9, 13, 19)\n * @returns {Array} viewBox (visible area)\n */\nexports.shapeArea = function(hideMargin, zoom, size) {\n    var offsetX, offsetY, lX, lY;\n    if (hideMargin) {\n\toffsetX = offsetY = SV_MARGIN + SV_BORDER_SHRINK;\n\tlX = lY = SV_GRID_SIZE - 2*SV_BORDER_SHRINK;\n    } else {\n\toffsetX = offsetY = 0;\n\tlX = lY = SV_GRID_SIZE + 2*SV_MARGIN;\n    }\n    if (zoom) {\n\tsize = +size;\n\tvar step = SV_GRID_SIZE / (size + 1);\n\tvar border = step / 2;\n\tif (\"point\" == zoom.mode) {\n\t    var coord = toColRow(zoom.center, size);\n\t    offsetX += (coord.i - (size + 1) / 2) * step;\n\t    offsetY += (coord.j - (size + 1) / 2) * step;\n\t    offsetX += (1 / 2 - 1 / (2 * zoom.ratio)) * lX;\n\t    offsetY += (1 / 2 - 1 / (2 * zoom.ratio)) * lY;\n\t    lX /= zoom.ratio;\n\t    lY /= zoom.ratio;\n\t} else if (\"zone\" == zoom.mode) {\n\t    switch (zoom.region) {\n\t    case \"NW\":\n\t\toffsetX += 0;\n\t\toffsetY += 0;\n\t\tlX = lX / 2 + border;\n\t\tlY = lY / 2 + border;\n\t\tbreak;\n\t    case \"NE\":\n\t\toffsetX += lX / 2 - border;\n\t\toffsetY += 0;\n\t\tlX = lX / 2 + border;\n\t\tlY = lY / 2 + border;\n\t\tbreak;\n\t    case \"SE\":\n\t\toffsetX += lX / 2 - border;\n\t\toffsetY += lY / 2 - border;\n\t\tlX = lX / 2 + border;\n\t\tlY = lY / 2 + border;\n\t\tbreak;\n\t    case \"SW\":\n\t\toffsetX += 0;\n\t\toffsetY += lY / 2 - border;\n\t\tlX = lX / 2 + border;\n\t\tlY = lY / 2 + border;\n\t\tbreak;\n\t    }\n\t}\n    }\n    return [offsetX, offsetY, lX, lY];\n}\n\n"]},"metadata":{},"sourceType":"script"}