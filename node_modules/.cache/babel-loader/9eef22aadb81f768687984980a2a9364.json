{"ast":null,"code":"import { all, takeLatest, call, put } from 'redux-saga/effects';\nimport { registration, login } from \"../../api/auth\";\nimport { setToken } from '../../helpers/session';\nimport { REG_SUBMIT, REG_ERROR, LOGIN_ERROR, LOGIN_SUBMIT } from \"./types\";\nimport history from '../../history';\n\nfunction* fetchReg_saga(action) {\n  const {\n    payload\n  } = action;\n\n  try {\n    yield put({\n      type: REG_ERROR,\n      error: {}\n    });\n    const res = yield call(registration, payload.nickname, payload.email);\n\n    if (res.errors) {\n      yield put({\n        type: REG_ERROR,\n        error: res.errors\n      });\n    }\n\n    if (res.token) {\n      yield put({\n        type: REG_ERROR,\n        error: {}\n      });\n      setToken(res.token);\n      window.location.assign('/');\n    }\n  } catch (e) {\n    yield put({\n      type: REG_ERROR,\n      error: e\n    }); //throw e;\n  }\n}\n\nfunction* fetchLogin_saga(action) {\n  const {\n    payload\n  } = action;\n\n  try {\n    yield put({\n      type: LOGIN_ERROR,\n      error: {}\n    });\n    const res = yield call(login, payload.password, payload.email);\n\n    if (res.errors) {\n      yield put({\n        type: LOGIN_ERROR,\n        error: res.errors\n      });\n    }\n\n    if (res.token) {\n      yield put({\n        type: LOGIN_ERROR,\n        error: {}\n      });\n      setToken(res.token);\n      window.location.assign('/');\n    }\n  } catch (e) {\n    yield put({\n      type: LOGIN_ERROR,\n      error: e\n    }); //throw e;\n  }\n}\n\nexport function* authSaga() {\n  yield all([takeLatest(REG_SUBMIT, fetchReg_saga), takeLatest(LOGIN_SUBMIT, fetchLogin_saga)]);\n}","map":{"version":3,"sources":["/Users/garinegorgmail.com/Downloads/gohackathon-base-client-instance-master/src/store/Auth/saga.js"],"names":["all","takeLatest","call","put","registration","login","setToken","REG_SUBMIT","REG_ERROR","LOGIN_ERROR","LOGIN_SUBMIT","history","fetchReg_saga","action","payload","type","error","res","nickname","email","errors","token","window","location","assign","e","fetchLogin_saga","password","authSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,UAAb,EAAyBC,IAAzB,EAA+BC,GAA/B,QAAyC,oBAAzC;AACA,SAAQC,YAAR,EAAqBC,KAArB,QAAiC,gBAAjC;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,WAAhC,EAA4CC,YAA5C,QAAgE,SAAhE;AACA,OAAOC,OAAP,MAAoB,eAApB;;AAEA,UAAUC,aAAV,CAAwBC,MAAxB,EAAgC;AAC9B,QAAM;AAACC,IAAAA;AAAD,MAAYD,MAAlB;;AACA,MAAI;AACF,UAAMV,GAAG,CAAC;AAAEY,MAAAA,IAAI,EAAEP,SAAR;AAAmBQ,MAAAA,KAAK,EAAE;AAA1B,KAAD,CAAT;AACA,UAAMC,GAAG,GAAG,MAAMf,IAAI,CAACE,YAAD,EAAeU,OAAO,CAACI,QAAvB,EAAiCJ,OAAO,CAACK,KAAzC,CAAtB;;AACA,QAAGF,GAAG,CAACG,MAAP,EAAe;AACb,YAAMjB,GAAG,CAAC;AAAEY,QAAAA,IAAI,EAACP,SAAP;AAAkBQ,QAAAA,KAAK,EAAEC,GAAG,CAACG;AAA7B,OAAD,CAAT;AACD;;AACD,QAAGH,GAAG,CAACI,KAAP,EAAc;AACZ,YAAMlB,GAAG,CAAC;AAAEY,QAAAA,IAAI,EAAEP,SAAR;AAAmBQ,QAAAA,KAAK,EAAE;AAA1B,OAAD,CAAT;AACAV,MAAAA,QAAQ,CAACW,GAAG,CAACI,KAAL,CAAR;AACAC,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,GAAvB;AACD;AACF,GAXD,CAWE,OAAOC,CAAP,EAAU;AACV,UAAMtB,GAAG,CAAC;AAACY,MAAAA,IAAI,EAAEP,SAAP;AAAkBQ,MAAAA,KAAK,EAAES;AAAzB,KAAD,CAAT,CADU,CAEV;AACD;AACF;;AAED,UAAUC,eAAV,CAA0Bb,MAA1B,EAAkC;AAChC,QAAM;AAACC,IAAAA;AAAD,MAAYD,MAAlB;;AACA,MAAI;AACF,UAAMV,GAAG,CAAC;AAAEY,MAAAA,IAAI,EAAEN,WAAR;AAAqBO,MAAAA,KAAK,EAAE;AAA5B,KAAD,CAAT;AACA,UAAMC,GAAG,GAAG,MAAMf,IAAI,CAACG,KAAD,EAAQS,OAAO,CAACa,QAAhB,EAA0Bb,OAAO,CAACK,KAAlC,CAAtB;;AACA,QAAGF,GAAG,CAACG,MAAP,EAAe;AACb,YAAMjB,GAAG,CAAC;AAAEY,QAAAA,IAAI,EAACN,WAAP;AAAoBO,QAAAA,KAAK,EAAEC,GAAG,CAACG;AAA/B,OAAD,CAAT;AACD;;AACD,QAAGH,GAAG,CAACI,KAAP,EAAc;AACZ,YAAMlB,GAAG,CAAC;AAAEY,QAAAA,IAAI,EAAEN,WAAR;AAAqBO,QAAAA,KAAK,EAAE;AAA5B,OAAD,CAAT;AACAV,MAAAA,QAAQ,CAACW,GAAG,CAACI,KAAL,CAAR;AACAC,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,GAAvB;AACD;AACF,GAXD,CAWE,OAAOC,CAAP,EAAU;AACV,UAAMtB,GAAG,CAAC;AAACY,MAAAA,IAAI,EAAEN,WAAP;AAAoBO,MAAAA,KAAK,EAAES;AAA3B,KAAD,CAAT,CADU,CAEV;AACD;AACF;;AAED,OAAO,UAAUG,QAAV,GAAqB;AAC1B,QAAM5B,GAAG,CAAC,CACRC,UAAU,CAACM,UAAD,EAAaK,aAAb,CADF,EAERX,UAAU,CAACS,YAAD,EAAegB,eAAf,CAFF,CAAD,CAAT;AAID","sourcesContent":["import {all, takeLatest, call, put} from 'redux-saga/effects';\nimport {registration,login} from \"../../api/auth\";\nimport { setToken } from '../../helpers/session';\nimport { REG_SUBMIT, REG_ERROR, LOGIN_ERROR,LOGIN_SUBMIT } from \"./types\";\nimport history from '../../history'\n\nfunction* fetchReg_saga(action) {\n  const {payload} = action;\n  try {\n    yield put({ type: REG_ERROR, error: {}});\n    const res = yield call(registration, payload.nickname, payload.email)\n    if(res.errors) {\n      yield put({ type:REG_ERROR, error: res.errors})\n    }\n    if(res.token) {\n      yield put({ type: REG_ERROR, error: {}});\n      setToken(res.token);\n      window.location.assign('/')\n    }\n  } catch (e) {\n    yield put({type: REG_ERROR, error: e});\n    //throw e;\n  }\n}\n\nfunction* fetchLogin_saga(action) {\n  const {payload} = action;\n  try {\n    yield put({ type: LOGIN_ERROR, error: {}});\n    const res = yield call(login, payload.password, payload.email)\n    if(res.errors) {\n      yield put({ type:LOGIN_ERROR, error: res.errors})\n    }\n    if(res.token) {\n      yield put({ type: LOGIN_ERROR, error: {}});\n      setToken(res.token);\n      window.location.assign('/')\n    }\n  } catch (e) {\n    yield put({type: LOGIN_ERROR, error: e});\n    //throw e;\n  }\n}\n\nexport function* authSaga() {\n  yield all([\n    takeLatest(REG_SUBMIT, fetchReg_saga),\n    takeLatest(LOGIN_SUBMIT, fetchLogin_saga)\n  ])\n}\n"]},"metadata":{},"sourceType":"module"}