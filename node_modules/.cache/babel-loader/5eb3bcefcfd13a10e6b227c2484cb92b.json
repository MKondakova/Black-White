{"ast":null,"code":"import { all, takeLatest, call, put } from \"redux-saga/effects\";\nimport { getToken } from \"../../helpers/session\";\nimport { CREATE_GAME_CODE, CREATE_GAME_ERROR, CREATE_GAME_SUCCESS, JOIN_GAME_WITH_CODE, JOIN_GAME_WITH_CODE_ERROR, JOIN_GAME_WITH_CODE_SUCCESS, CREATE_RANDOM_GAME, CREATE_RANDOM_GAME_ERROR, CREATE_RANDOM_GAME_SUCCESS, CREATE_GAME_WITH_AI, CREATE_GAME_WITH_AI_ERROR, CREATE_GAME_WITH_AI_SUCCESS, GET_CURRENT_GAME } from \"./types\";\nimport { createCode, joinGameWithCode, createRandomGame, createGameWithAi, getCurrentGame } from \"../../api/gameCreate\";\nimport history from '../../history';\n\nfunction* fetchCreateGameCode_saga() {\n  try {\n    yield put({\n      type: CREATE_GAME_ERROR,\n      error: {}\n    });\n    const res = yield call(createCode, getToken());\n\n    if (res.code) {\n      yield put({\n        type: CREATE_GAME_ERROR,\n        error: {}\n      });\n      yield put({\n        type: CREATE_GAME_SUCCESS,\n        payload: {\n          code: res.code,\n          gameId: res.gameId\n        }\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: CREATE_GAME_ERROR,\n      error: e\n    }); // throw e;\n  }\n}\n\nfunction* fetchJoinGameWithCode_saga(action) {\n  const {\n    payload\n  } = action;\n\n  try {\n    yield put({\n      type: JOIN_GAME_WITH_CODE_ERROR,\n      error: {}\n    });\n    const res = yield call(joinGameWithCode, payload.code, getToken());\n\n    if (res.id) {\n      yield put({\n        type: JOIN_GAME_WITH_CODE_ERROR,\n        error: {}\n      });\n      yield put({\n        type: JOIN_GAME_WITH_CODE_SUCCESS,\n        payload: res.id\n      });\n      history.push('/gameBoard');\n    } else {\n      alert(res.message);\n    }\n  } catch (e) {\n    yield put({\n      type: JOIN_GAME_WITH_CODE_ERROR,\n      error: e\n    }); // throw e;\n  }\n}\n\nfunction* fetchCreateRandomGame_saga() {\n  try {\n    yield put({\n      type: CREATE_RANDOM_GAME_ERROR,\n      error: {}\n    });\n    const res = yield call(createRandomGame, getToken());\n\n    if (res.gameId) {\n      yield put({\n        type: CREATE_RANDOM_GAME_ERROR,\n        error: {}\n      });\n      yield put({\n        type: CREATE_RANDOM_GAME_SUCCESS,\n        payload: res.gameId\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: CREATE_RANDOM_GAME_ERROR,\n      error: e\n    }); // throw e;\n  }\n}\n\nfunction* fetchCreateGameWithAi_saga() {\n  try {\n    yield put({\n      type: CREATE_GAME_WITH_AI_ERROR,\n      error: {}\n    });\n    const res = yield call(createGameWithAi, getToken());\n\n    if (res.gameId) {\n      yield put({\n        type: CREATE_GAME_WITH_AI_ERROR,\n        error: {}\n      });\n      yield put({\n        type: CREATE_GAME_WITH_AI_SUCCESS,\n        payload: res.gameId\n      });\n      history.push('/gameBoard');\n    }\n  } catch (e) {\n    yield put({\n      type: CREATE_GAME_WITH_AI_ERROR,\n      error: e\n    }); // throw e;\n  }\n}\n\nfunction* fetchGetCurrentGame_saga() {\n  try {\n    const res = yield call(getCurrentGame, getToken());\n\n    if (res.gameId) {\n      yield put({\n        type: JOIN_GAME_WITH_CODE_SUCCESS,\n        payload: res.gameId\n      });\n    }\n  } catch (e) {\n    yield put({\n      type: CREATE_RANDOM_GAME_ERROR,\n      error: e\n    }); // throw e;\n  }\n}\n\nexport function* gameCreateSaga() {\n  yield all([takeLatest(CREATE_GAME_CODE, fetchCreateGameCode_saga), takeLatest(JOIN_GAME_WITH_CODE, fetchJoinGameWithCode_saga), takeLatest(CREATE_RANDOM_GAME, fetchCreateRandomGame_saga), takeLatest(CREATE_GAME_WITH_AI, fetchCreateGameWithAi_saga), takeLatest(GET_CURRENT_GAME, fetchGetCurrentGame_saga)]);\n}","map":{"version":3,"sources":["/Users/garinegorgmail.com/Downloads/gohackathon-base-client-instance-master/src/store/GameCreate/saga.js"],"names":["all","takeLatest","call","put","getToken","CREATE_GAME_CODE","CREATE_GAME_ERROR","CREATE_GAME_SUCCESS","JOIN_GAME_WITH_CODE","JOIN_GAME_WITH_CODE_ERROR","JOIN_GAME_WITH_CODE_SUCCESS","CREATE_RANDOM_GAME","CREATE_RANDOM_GAME_ERROR","CREATE_RANDOM_GAME_SUCCESS","CREATE_GAME_WITH_AI","CREATE_GAME_WITH_AI_ERROR","CREATE_GAME_WITH_AI_SUCCESS","GET_CURRENT_GAME","createCode","joinGameWithCode","createRandomGame","createGameWithAi","getCurrentGame","history","fetchCreateGameCode_saga","type","error","res","code","payload","gameId","e","fetchJoinGameWithCode_saga","action","id","push","alert","message","fetchCreateRandomGame_saga","fetchCreateGameWithAi_saga","fetchGetCurrentGame_saga","gameCreateSaga"],"mappings":"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","sourcesContent":["import { all, takeLatest, call, put } from \"redux-saga/effects\";\nimport { getToken } from \"../../helpers/session\";\nimport {\n  CREATE_GAME_CODE, CREATE_GAME_ERROR, CREATE_GAME_SUCCESS,\n  JOIN_GAME_WITH_CODE, JOIN_GAME_WITH_CODE_ERROR, JOIN_GAME_WITH_CODE_SUCCESS,\n  CREATE_RANDOM_GAME, CREATE_RANDOM_GAME_ERROR, CREATE_RANDOM_GAME_SUCCESS,\n  CREATE_GAME_WITH_AI, CREATE_GAME_WITH_AI_ERROR, CREATE_GAME_WITH_AI_SUCCESS,\n  GET_CURRENT_GAME } from \"./types\";\nimport { createCode, joinGameWithCode, createRandomGame, createGameWithAi, getCurrentGame } from \"../../api/gameCreate\";\n\nimport history from '../../history'\n\nfunction* fetchCreateGameCode_saga() {\n  try {\n    yield put({ type: CREATE_GAME_ERROR, error: {} });\n    const res = yield call(createCode, getToken());\n    if (res.code) {\n      yield put({ type: CREATE_GAME_ERROR, error: {} });\n      yield put({ type: CREATE_GAME_SUCCESS, payload: {code: res.code, gameId: res.gameId}})\n    }\n  } catch (e) {\n    yield put({ type: CREATE_GAME_ERROR, error: e });\n    // throw e;\n  }\n}\n\nfunction* fetchJoinGameWithCode_saga(action) {\n  const { payload } = action;\n  try {\n    yield put({ type: JOIN_GAME_WITH_CODE_ERROR, error: {} });\n    const res = yield call(joinGameWithCode, payload.code, getToken());\n    if (res.id) {\n      yield put({ type: JOIN_GAME_WITH_CODE_ERROR, error: {} });\n      yield put({ type: JOIN_GAME_WITH_CODE_SUCCESS, payload: res.id})\n      history.push('/gameBoard')\n    } else {\n      alert(res.message)\n    }\n  } catch (e) {\n    yield put({ type: JOIN_GAME_WITH_CODE_ERROR, error: e });\n    // throw e;\n  }\n}\n\nfunction* fetchCreateRandomGame_saga() {\n  try {\n    yield put({ type: CREATE_RANDOM_GAME_ERROR, error: {} });\n    const res = yield call(createRandomGame, getToken());\n    if (res.gameId) {\n      yield put({ type: CREATE_RANDOM_GAME_ERROR, error: {} });\n      yield put({ type: CREATE_RANDOM_GAME_SUCCESS, payload: res.gameId})\n    }\n  } catch (e) {\n    yield put({ type: CREATE_RANDOM_GAME_ERROR, error: e });\n    // throw e;\n  }\n}\n\nfunction* fetchCreateGameWithAi_saga() {\n  try {\n    yield put({ type: CREATE_GAME_WITH_AI_ERROR, error: {} });\n    const res = yield call(createGameWithAi, getToken());\n    if (res.gameId) {\n      yield put({ type: CREATE_GAME_WITH_AI_ERROR, error: {} });\n      yield put({ type: CREATE_GAME_WITH_AI_SUCCESS, payload: res.gameId})\n      history.push('/gameBoard')\n    }\n  } catch (e) {\n    yield put({ type: CREATE_GAME_WITH_AI_ERROR, error: e });\n    // throw e;\n  }\n}\n\nfunction* fetchGetCurrentGame_saga() {\n  try {\n    const res = yield call(getCurrentGame, getToken());\n    if (res.gameId) {\n      yield put({ type: JOIN_GAME_WITH_CODE_SUCCESS, payload: res.gameId})\n    }\n  } catch (e) {\n    yield put({ type: CREATE_RANDOM_GAME_ERROR, error: e });\n    // throw e;\n  }\n}\n\nexport function* gameCreateSaga() {\n  yield all([\n    takeLatest(CREATE_GAME_CODE, fetchCreateGameCode_saga),\n    takeLatest(JOIN_GAME_WITH_CODE, fetchJoinGameWithCode_saga),\n    takeLatest(CREATE_RANDOM_GAME, fetchCreateRandomGame_saga),\n    takeLatest(CREATE_GAME_WITH_AI, fetchCreateGameWithAi_saga),\n    takeLatest(GET_CURRENT_GAME, fetchGetCurrentGame_saga),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}