{"ast":null,"code":"import { SINGLE_HELP, MARKERS_CLEAR, MULTIPLE_HELP, MAP_HELP, WINNER_USER, LOSER_USER, SET_BLOCKED, MAP_STONES, SCORES, SCORES_WINNER } from \"./types\";\nimport { MAP_HALF, MAP_QUARTERS } from \"../../pages/GameBoard/components/Help/types\";\nconst initialState = {\n  markers: {},\n  classNamesMapStones: {},\n  mapStones: {},\n  winner: null,\n  loser: null,\n  blocked: false,\n  scores: null,\n  scoresWinner: null\n};\nexport const boardReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SINGLE_HELP:\n      return { ...state,\n        markers: action.payload,\n        blocked: false\n      };\n\n    case SET_BLOCKED:\n      return { ...state,\n        blocked: action.payload\n      };\n\n    case MULTIPLE_HELP:\n      return { ...state,\n        markers: {},\n        blocked: false\n      };\n\n    case MARKERS_CLEAR:\n      return { ...state,\n        markers: {},\n        mapStones: {},\n        classNamesMapStones: {},\n        scores: null,\n        scoresWinner: null\n      };\n\n    case MAP_STONES:\n      return { ...state,\n        mapStones: action.payload,\n        blocked: false\n      };\n\n    case MAP_HELP:\n      if (action.payload.zone) {\n        var {\n          mapStones,\n          classNamesMapStones\n        } = action.payload.isQuarter ? MAP_QUARTERS[action.payload.zone] : MAP_HALF[action.payload.zone];\n      } else {\n        var mapStones = {};\n        var classNamesMapStones = {};\n        let alpha = 'ABCDEFGHJKLMNOPQRSTUV';\n        action.payload.map((row, rowId) => {\n          row.map((cell, colId) => {\n            if (parseInt(cell) !== 0) {\n              let sign = alpha[rowId];\n              let coord = `${sign}${colId + 1}`;\n              mapStones[coord] = \"circle\";\n              classNamesMapStones[coord] = `redstone size-${cell}`;\n            }\n          });\n        });\n      }\n\n      return { ...state,\n        mapStones,\n        classNamesMapStones,\n        blocked: false\n      };\n\n    case WINNER_USER:\n      return { ...state,\n        winner: action.payload\n      };\n\n    case LOSER_USER:\n      return { ...state,\n        loser: action.payload\n      };\n\n    case SCORES:\n      return { ...state,\n        scores: action.payload,\n        blocked: false\n      };\n\n    case SCORES_WINNER:\n      return { ...state,\n        scoresWinner: action.payload,\n        blocked: false\n      };\n\n    default:\n      return { ...state\n      };\n  }\n};","map":{"version":3,"sources":["/Users/garinegorgmail.com/Downloads/gohackathon-base-client-instance-master/src/store/Board/reducers.js"],"names":["SINGLE_HELP","MARKERS_CLEAR","MULTIPLE_HELP","MAP_HELP","WINNER_USER","LOSER_USER","SET_BLOCKED","MAP_STONES","SCORES","SCORES_WINNER","MAP_HALF","MAP_QUARTERS","initialState","markers","classNamesMapStones","mapStones","winner","loser","blocked","scores","scoresWinner","boardReducer","state","action","type","payload","zone","isQuarter","alpha","map","row","rowId","cell","colId","parseInt","sign","coord"],"mappings":"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","sourcesContent":["import {\n  SINGLE_HELP,\n  MARKERS_CLEAR,\n  MULTIPLE_HELP,\n  MAP_HELP,\n  WINNER_USER,\n  LOSER_USER,\n  SET_BLOCKED,\n  MAP_STONES,\n  SCORES,\n  SCORES_WINNER } from \"./types\";\nimport { MAP_HALF, MAP_QUARTERS } from \"../../pages/GameBoard/components/Help/types\";\n\nconst initialState = {\n  markers: {},\n  classNamesMapStones: {},\n  mapStones: {},\n  winner: null,\n  loser: null,\n  blocked: false,\n  scores: null,\n  scoresWinner: null\n};\n\nexport const boardReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SINGLE_HELP:\n      return {\n        ...state,\n        markers: action.payload,\n        blocked: false\n      };\n    case SET_BLOCKED:\n      return {\n        ...state,\n        blocked: action.payload\n      };\n    case MULTIPLE_HELP:\n      return {\n        ...state,\n        markers: {},\n        blocked: false\n      };\n    case MARKERS_CLEAR:\n      return {\n        ...state,\n        markers: {},\n        mapStones: {},\n        classNamesMapStones: {},\n        scores: null,\n        scoresWinner: null\n      };\n    case MAP_STONES:\n      return {\n        ...state,\n        mapStones: action.payload,\n        blocked: false\n      };\n    case MAP_HELP:\n\n      if (action.payload.zone) {\n        var {\n          mapStones,\n          classNamesMapStones\n        } = action.payload.isQuarter ? MAP_QUARTERS[action.payload.zone] : MAP_HALF[action.payload.zone];\n      } else {\n        var mapStones = {};\n        var classNamesMapStones = {};\n        let alpha = 'ABCDEFGHJKLMNOPQRSTUV'\n        action.payload.map((row, rowId) => {\n          row.map((cell, colId) => {\n            if (parseInt(cell) !== 0) {\n              let sign = alpha[rowId];\n              let coord = `${sign}${(colId + 1)}`;\n              mapStones[coord] = \"circle\"\n              classNamesMapStones[coord] = `redstone size-${cell}`\n            }\n          })\n        })\n      }\n\n      return {\n        ...state,\n        mapStones,\n        classNamesMapStones,\n        blocked: false\n      };\n    case WINNER_USER:\n      return {\n        ...state,\n        winner: action.payload\n      };\n    case LOSER_USER:\n      return {\n        ...state,\n        loser: action.payload\n      };\n    case SCORES:\n      return {\n        ...state,\n        scores: action.payload,\n        blocked: false\n      };\n    case SCORES_WINNER:\n      return {\n        ...state,\n        scoresWinner: action.payload,\n        blocked: false\n      };\n    default:\n      return {...state};\n  }\n};\n"]},"metadata":{},"sourceType":"module"}